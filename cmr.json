{
  "openapi": "3.0.3",
  "info": {
    "title": "CMR2 API",
    "version": "2.0.0",
    "description": "Your project description",
    "contact": {
      "name": "API Support",
      "url": "https://cmr.funai.gov.br/admin/criticas/",
      "email": "contato@hex360.com.br"
    }
  },
  "paths": {
    "/adm-panel/manual/": {
      "get": {
        "operationId": "adm_panel_manual_retrieve",
        "description": "Download system manual PDF",
        "summary": "Download manual",
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "PDF download"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/adm-panel/tickets/": {
      "get": {
        "operationId": "adm_panel_tickets_list",
        "description": "List all tickets for authenticated user (all tickets if staff)",
        "summary": "List all tickets",
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "operationId": "adm_panel_tickets_create",
        "description": "Create a new ticket with optional attachments",
        "summary": "Create new ticket",
        "tags": [
          "adm-panel"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketRequest"
              },
              "examples": {
                "TicketCreationExample": {
                  "value": {
                    "subject": "System issue",
                    "description": "Can't access module X",
                    "solicitation_type": "BUG",
                    "functionality": 1
                  },
                  "summary": "Ticket creation example"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TicketRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TicketRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/adm-panel/tickets/{id}/": {
      "get": {
        "operationId": "adm_panel_tickets_retrieve",
        "description": "Retrieve details for a specific ticket",
        "summary": "Get ticket details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Ticket ID",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/adm-panel/tickets/choices/": {
      "get": {
        "operationId": "adm_panel_tickets_choices_retrieve",
        "description": "Retrieve available choices for ticket status",
        "summary": "Get ticket status choices",
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketStatusChoices"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/adm-panel/tickets/download-tickets/": {
      "post": {
        "operationId": "adm_panel_tickets_download_tickets_create",
        "description": "Generate Excel report for specified tickets",
        "summary": "Generate Excel report",
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Excel file"
          },
          "400": {
            "description": "Invalid ticket IDs"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No tickets found"
          }
        }
      }
    },
    "/adm-panel/tickets/download/attachments/critcs_and_suggestions/answer/{filename}/": {
      "get": {
        "operationId": "adm_panel_tickets_download_attachments_critcs_and_suggestions_answer_retrieve",
        "description": "Download ticket attachment document",
        "summary": "Download document",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "description": "Document filename",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "File download"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/adm-panel/tickets/send-email/": {
      "post": {
        "operationId": "adm_panel_tickets_send_email_create",
        "description": "Send email related to a specific ticket",
        "summary": "Send ticket email",
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          },
          "500": {
            "description": "Email sending failed"
          }
        }
      }
    },
    "/adm-panel/tickets/status/": {
      "get": {
        "operationId": "adm_panel_tickets_status_list",
        "description": "Retrieve ticket status information",
        "summary": "Get ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketStatus"
                  }
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "operationId": "adm_panel_tickets_status_partial_update",
        "description": "Update ticket status and create history entry (admin only)",
        "summary": "Update ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "description": "Invalid data"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/adm-panel/tickets/status-update/{ticket_id}/": {
      "get": {
        "operationId": "adm_panel_tickets_status_update_list",
        "description": "Retrieve ticket status information",
        "summary": "Get ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketStatus"
                  }
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "operationId": "adm_panel_tickets_status_update_partial_update",
        "description": "Update ticket status and create history entry (admin only)",
        "summary": "Update ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "description": "Invalid data"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/adm-panel/tickets/status/{ticket_id}/": {
      "get": {
        "operationId": "adm_panel_tickets_status_list_2",
        "description": "Retrieve ticket status information",
        "summary": "Get ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketStatus"
                  }
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "operationId": "adm_panel_tickets_status_partial_update_2",
        "description": "Update ticket status and create history entry (admin only)",
        "summary": "Update ticket status",
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "schema": {
              "type": "string"
            },
            "description": "Ticket code",
            "required": true
          }
        ],
        "tags": [
          "adm-panel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTicketStatusRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "description": "Invalid data"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/alerts/": {
      "get": {
        "operationId": "alerts_list",
        "description": "Returns spatial data for urgent alerts with filtering capabilities",
        "summary": "List urgent alerts with geometry",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Regional Coordination code"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Indigenous Lands Funai code"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date filter"
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Bounding box filter (min lon, min lat, max lon, max lat)"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date filter"
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsSerializersList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/alerts/classes/": {
      "get": {
        "operationId": "alerts_classes_list",
        "description": "Returns distinct classification stages for urgent alerts",
        "summary": "List alert classification stages",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Regional Coordination code"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Indigenous Lands Funai code"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date filter"
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Bounding box filter (min lon, min lat, max lon, max lat)"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date filter"
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertsClassesSerializers"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/alerts/detail/{id}/": {
      "get": {
        "operationId": "alerts_detail_retrieve",
        "description": "Returns detailed information for a specific urgent alert",
        "summary": "Get urgent alert details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Alert ID",
            "required": true
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsDetailSerializers"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/alerts/stats/": {
      "get": {
        "operationId": "alerts_stats_list",
        "description": "Returns aggregated statistics (area and count) for urgent alerts",
        "summary": "Get urgent alerts map statistics",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Regional Coordination code"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Indigenous Lands Funai code"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date filter"
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Bounding box filter (min lon, min lat, max lon, max lat)"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date filter"
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapStatsResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/alerts/table/": {
      "get": {
        "operationId": "alerts_table_list",
        "description": "Returns non-spatial data for urgent alerts with filtering capabilities",
        "summary": "List urgent alerts (tabular data)",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Regional Coordination code"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by Indigenous Lands Funai code"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date filter"
          },
          {
            "name": "in_bbox",
            "required": false,
            "in": "query",
            "description": "Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              },
              "minItems": 4,
              "maxItems": 4,
              "example": [
                0,
                0,
                10,
                10
              ]
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date filter"
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertsTableSerializers"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/change-password/": {
      "post": {
        "operationId": "auth_change_password_create",
        "description": "Allows authenticated users to change their password",
        "summary": "Change user password",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordSuccess"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid password"
          }
        }
      }
    },
    "/auth/confirmar/": {
      "post": {
        "operationId": "auth_confirmar_create",
        "description": "Allows users to set a new password using a valid reset code",
        "summary": "Confirm password reset",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "Password has been reset"
          },
          "400": {
            "description": "Invalid reset code or password"
          }
        }
      }
    },
    "/auth/logout/": {
      "post": {
        "operationId": "auth_logout_create",
        "description": "Blacklists the refresh token to log out the user",
        "summary": "User logout",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequestRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequestRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "400": {
            "description": "Invalid token"
          }
        }
      }
    },
    "/auth/obtain_token/": {
      "post": {
        "operationId": "auth_obtain_token_create",
        "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomTokenObtainPairRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomTokenObtainPairRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomTokenObtainPairRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTokenObtainPair"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/password-reset/": {
      "post": {
        "operationId": "auth_password_reset_create",
        "description": "Sends a password reset code to the user's email",
        "summary": "Request password reset",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequestRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequestRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "Password reset code sent"
          },
          "400": {
            "description": "Invalid email or FUNAI user"
          }
        }
      }
    },
    "/auth/refresh_token/": {
      "post": {
        "operationId": "auth_refresh_token_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefresh"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/dashboard/download-csv/": {
      "get": {
        "operationId": "dashboard_download_csv_retrieve",
        "tags": [
          "dashboard"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardData"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/dashboard/get-all/": {
      "get": {
        "operationId": "dashboard_get_all_list",
        "description": "API view to retrieve DashboardData objects with optional filtering and monthly count.",
        "tags": [
          "dashboard"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardData"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/dashboard/get-user-login/": {
      "get": {
        "operationId": "dashboard_get_user_login_list",
        "description": "API view for retrieving dashboard access records for a specific user.",
        "tags": [
          "dashboard"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardData"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/dashboard/get-year/": {
      "get": {
        "operationId": "dashboard_get_year_list",
        "description": "API view to retrieve DashboardData objects aggregated by year.",
        "tags": [
          "dashboard"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardData"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/funai/all-data-ti-by-name/": {
      "get": {
        "operationId": "funai_all_data_ti_by_name_list",
        "description": "Returns a list of Indigenous Lands with detailed properties, filtered by name, municipality, or regional coordination (case-insensitive, accent-insensitive).",
        "summary": "Search Indigenous Lands with detailed properties",
        "tags": [
          "funai"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TiProperties"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/funai/busca-geo-ti/": {
      "get": {
        "operationId": "funai_busca_geo_ti_list",
        "description": "Returns GeoJSON data for Indigenous Lands based on the provided ID.",
        "summary": "Retrieve Indigenous Lands GeoJSON data by ID",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoTerraIndigenaList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "No response body"
          }
        }
      }
    },
    "/funai/cr/": {
      "get": {
        "operationId": "funai_cr_list",
        "description": "Returns a list of Regional Coordination data sorted in ascending alphabetical order by 'ds_cr'.",
        "summary": "List Regional Coordination data",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoordenacaoRegional"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/funai/management-instrument/": {
      "get": {
        "operationId": "funai_management_instrument_list",
        "description": "Lists management instruments based on the provided co_funai or creates a new one.",
        "summary": "List or create management instruments",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentoGestao"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      },
      "post": {
        "operationId": "funai_management_instrument_create",
        "description": "Lists management instruments based on the provided co_funai or creates a new one.",
        "summary": "List or create management instruments",
        "tags": [
          "funai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentoGestao"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      }
    },
    "/funai/management-instrument/{co_funai}/": {
      "get": {
        "operationId": "funai_management_instrument_retrieve",
        "description": "Retrieves, updates, or deletes a management instrument based on the provided co_funai.",
        "summary": "Retrieve, update, or delete a management instrument",
        "parameters": [
          {
            "in": "path",
            "name": "co_funai",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentoGestao"
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      },
      "put": {
        "operationId": "funai_management_instrument_update",
        "description": "Retrieves, updates, or deletes a management instrument based on the provided co_funai.",
        "summary": "Retrieve, update, or delete a management instrument",
        "parameters": [
          {
            "in": "path",
            "name": "co_funai",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "funai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentoGestaoRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentoGestao"
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      },
      "patch": {
        "operationId": "funai_management_instrument_partial_update",
        "description": "Retrieves, updates, or deletes a management instrument based on the provided co_funai.",
        "summary": "Retrieve, update, or delete a management instrument",
        "parameters": [
          {
            "in": "path",
            "name": "co_funai",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "funai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedInstrumentoGestaoRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedInstrumentoGestaoRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedInstrumentoGestaoRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentoGestao"
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      },
      "delete": {
        "operationId": "funai_management_instrument_destroy",
        "description": "Retrieves, updates, or deletes a management instrument based on the provided co_funai.",
        "summary": "Retrieve, update, or delete a management instrument",
        "parameters": [
          {
            "in": "path",
            "name": "co_funai",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentoGestao"
                }
              }
            },
            "description": ""
          },
          "404": {
            "description": "No response body"
          }
        }
      }
    },
    "/funai/ti/": {
      "get": {
        "operationId": "funai_ti_list",
        "description": "Returns a list of Indigenous Lands data, filterable by Regional Coordination code (co_cr).",
        "summary": "List Indigenous Lands data",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LimiteTerraIndigena"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/funai/ti-by-name/": {
      "get": {
        "operationId": "funai_ti_by_name_list",
        "description": "Returns a list of Indigenous Lands filtered by name (case-insensitive, accent-insensitive).",
        "summary": "Search Indigenous Lands by name",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoTerraIndigenaList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/funai/ti-study-by-name/": {
      "get": {
        "operationId": "funai_ti_study_by_name_retrieve",
        "description": "Returns a list of Indigenous Lands in study filtered by name from a GeoServer WFS service.",
        "summary": "Search Indigenous Lands in Study by name",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/funai/village-by-name/": {
      "get": {
        "operationId": "funai_village_by_name_retrieve",
        "description": "Returns a list of Indigenous Villages filtered by name from a GeoServer WFS service.",
        "summary": "Search Indigenous Villages by name",
        "tags": [
          "funai"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/history/logs/": {
      "get": {
        "operationId": "history_logs_list",
        "description": "Returns system log entries or user change history. If 'user_id' is provided, returns the change history for that specific user from UserChangeHistory. Otherwise, returns all LogEntry records ordered by action time (descending).",
        "summary": "Retrieve system log entries or user change history",
        "tags": [
          "history"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  }
                }
              }
            },
            "description": ""
          },
          "200_user_id": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChangeHistory"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/history/logs/{id}/": {
      "get": {
        "operationId": "history_logs_list_2",
        "description": "Returns system log entries or user change history. If 'user_id' is provided, returns the change history for that specific user from UserChangeHistory. Otherwise, returns all LogEntry records ordered by action time (descending).",
        "summary": "Retrieve system log entries or user change history",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this entrada de log.",
            "required": true
          }
        ],
        "tags": [
          "history"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  }
                }
              }
            },
            "description": ""
          },
          "200_user_id": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChangeHistory"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/history/role-changes/": {
      "get": {
        "operationId": "history_role_changes_list",
        "description": "Returns the history of user role changes. If 'user_id' is provided, returns the role change history for that user, ordered by change date (descending). If no 'user_id' is provided, returns an empty queryset.",
        "summary": "Retrieve user role change history",
        "tags": [
          "history"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleChange"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/history/role-changes/{id}/": {
      "get": {
        "operationId": "history_role_changes_list_2",
        "description": "Returns the history of user role changes. If 'user_id' is provided, returns the role change history for that user, ordered by change date (descending). If no 'user_id' is provided, returns an empty queryset.",
        "summary": "Retrieve user role change history",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this User Role Change.",
            "required": true
          }
        ],
        "tags": [
          "history"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleChange"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/land-use/": {
      "get": {
        "operationId": "land_use_list",
        "description": "Returns a list of LandUseClasses spatial data with optional filtering by Regional Coordination code, Funai code, mapped years, or bounding box.",
        "summary": "List Land Use Classes spatial data",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "name": "in_bbox",
            "required": false,
            "in": "query",
            "description": "Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              },
              "minItems": 4,
              "maxItems": 4,
              "example": [
                0,
                0,
                10,
                10
              ]
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "map_year",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": [
          "land-use"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LandUseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/land-use/detail/{id}/": {
      "get": {
        "operationId": "land_use_detail_retrieve",
        "description": "Returns detailed data for a specific LandUseClasses record identified by its ID.",
        "summary": "Retrieve detailed Land Use Classes data",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "land-use"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LandUseDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/land-use/search/": {
      "get": {
        "operationId": "land_use_search_list",
        "description": "Returns a distinct list of LandUsePerTi records with filtering capabilities by Regional Coordination code, Funai code, mapped years, or bounding box.",
        "summary": "Search Land Use per Indigenous Land",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "name": "in_bbox",
            "required": false,
            "in": "query",
            "description": "Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              },
              "minItems": 4,
              "maxItems": 4,
              "example": [
                0,
                0,
                10,
                10
              ]
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "nu_ano",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": [
          "land-use"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LandUseSearch"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/land-use/stats/": {
      "get": {
        "operationId": "land_use_stats_list",
        "description": "Returns aggregated statistics (sum of area_ha, area_km2, and total count) for LandUseClasses data, with optional filtering by Regional Coordination code, Funai code, mapped years, or bounding box.",
        "summary": "Retrieve Land Use Classes statistics",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "name": "in_bbox",
            "required": false,
            "in": "query",
            "description": "Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              },
              "minItems": 4,
              "maxItems": 4,
              "example": [
                0,
                0,
                10,
                10
              ]
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "map_year",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": [
          "land-use"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "area_ha": {
                        "type": "number"
                      },
                      "area_km2": {
                        "type": "number"
                      },
                      "total": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/land-use/table/": {
      "get": {
        "operationId": "land_use_table_list",
        "description": "Returns a list of LandUsePerTi records with filtering capabilities by Regional Coordination code, Funai code, mapped years, or bounding box.",
        "summary": "List Land Use per Indigenous Land",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          },
          {
            "name": "in_bbox",
            "required": false,
            "in": "query",
            "description": "Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              },
              "minItems": 4,
              "maxItems": 4,
              "example": [
                0,
                0,
                10,
                10
              ]
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "nu_ano",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Valores múltiplos podem ser separados por vírgulas.",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": [
          "land-use"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LandUseTable"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/layer/": {
      "get": {
        "operationId": "layer_list",
        "description": "Returns a list of layers with selected fields (id, name, group_name), including related group data.",
        "summary": "List layers",
        "tags": [
          "layer"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Layer"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/layer/{id}/image/base64/": {
      "get": {
        "operationId": "layer_image_base64_retrieve",
        "description": "Returns the thumbnail image of a WMS layer as a base64-encoded string.",
        "summary": "Retrieve layer thumbnail as base64",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Base64-encoded thumbnail image"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/layer/{id}/layers-groups/": {
      "get": {
        "operationId": "layer_layers_groups_retrieve",
        "description": "Retrieves, updates, or deletes a layer group by ID. Deletion fails if the group is linked to registered layers.",
        "summary": "Retrieve, update, or delete a layer group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "layer_layers_groups_update",
        "description": "Retrieves, updates, or deletes a layer group by ID. Deletion fails if the group is linked to registered layers.",
        "summary": "Retrieve, update, or delete a layer group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "layer_layers_groups_partial_update",
        "description": "Retrieves, updates, or deletes a layer group by ID. Deletion fails if the group is linked to registered layers.",
        "summary": "Retrieve, update, or delete a layer group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "layer_layers_groups_destroy",
        "description": "Retrieves, updates, or deletes a layer group by ID. Deletion fails if the group is linked to registered layers.",
        "summary": "Retrieve, update, or delete a layer group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "description": "No response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/layer/{id}/legend/base64/": {
      "get": {
        "operationId": "layer_legend_base64_retrieve",
        "description": "Returns the thumbnail image of a WMS layer as a base64-encoded string.",
        "summary": "Retrieve layer thumbnail as base64",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "layer"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Base64-encoded thumbnail image"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/layer/layers-groups/": {
      "get": {
        "operationId": "layer_layers_groups_list",
        "description": "Returns a list of layer groups with associated layers, filtered by the GroupFilter. Allows creation of new layer groups.",
        "summary": "List or create layer groups",
        "parameters": [
          {
            "in": "query",
            "name": "category_groups",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "layer"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupComplete"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupComplete"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "No response body"
          }
        }
      },
      "post": {
        "operationId": "layer_layers_groups_create",
        "description": "Returns a list of layer groups with associated layers, filtered by the GroupFilter. Allows creation of new layer groups.",
        "summary": "List or create layer groups",
        "parameters": [
          {
            "in": "query",
            "name": "category_groups",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "layer"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCompleteRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupCompleteRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupCompleteRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupComplete"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComplete"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "No response body"
          }
        }
      }
    },
    "/monitoring/consolidated/": {
      "get": {
        "operationId": "monitoring_consolidated_list",
        "description": "Default authentication for `monitoring` views.",
        "summary": "List consolidated monitoring records",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "string"
            },
            "description": "Regional Coordination codes (comma-separated)"
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "string"
            },
            "description": "Indigenous Land codes (comma-separated)"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            },
            "description": "Bounding box: min_lon,min_lat,max_lon,max_lat"
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string"
            },
            "description": "Monitoring stage: CR, DG, FF, DR"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringConsolidatedList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/bbox/": {
      "get": {
        "operationId": "monitoring_consolidated_bbox_retrieve",
        "summary": "Calculate bounding box for Indigenous Lands or Regional Coordinations",
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "monitoring_consolidated_bbox_create",
        "summary": "Calculate bounding box for Indigenous Lands or Regional Coordinations",
        "tags": [
          "monitoring"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "co_funai": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "List of FUNAI codes"
                  },
                  "co_cr": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of Regional Coordination codes"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/classes/": {
      "get": {
        "operationId": "monitoring_consolidated_classes_list",
        "description": "Default authentication for `monitoring` views.",
        "summary": "List unique monitoring stages",
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringConsolidatedClasses"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/detail/{id}/": {
      "get": {
        "operationId": "monitoring_consolidated_detail_retrieve",
        "description": "Default authentication for `monitoring` views.",
        "summary": "Get details of a specific consolidated monitoring record",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringConsolidatedDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/map-stats/": {
      "get": {
        "operationId": "monitoring_consolidated_map_stats_list",
        "description": "Returns the sum of area_ha, area_km2, and total records",
        "summary": "Retrieve global statistics for area and record count",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringConsolidatedList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/table/": {
      "get": {
        "operationId": "monitoring_consolidated_table_list",
        "description": "Default authentication for `monitoring` views.",
        "summary": "List consolidated monitoring records in table format",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringConsolidatedTable"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/monitoring/consolidated/table-stats/": {
      "get": {
        "operationId": "monitoring_consolidated_table_stats_list",
        "description": "Default authentication for `monitoring` views.",
        "summary": "Retrieve monitoring statistics grouped by request parameter",
        "parameters": [
          {
            "in": "query",
            "name": "co_cr",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "co_funai",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "grouping",
            "schema": {
              "type": "string"
            },
            "description": "Grouping method: monitoring_by_year, _monthyear, _co_funai, etc."
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringConsolidatedByDay"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/": {
      "get": {
        "operationId": "permission_list",
        "description": "Returns all layer permissions registered in the system.",
        "summary": "List all LayerPermissions",
        "tags": [
          "permission"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayerPermission"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      [
                        {
                          "id": 1,
                          "name": "PLANET",
                          "description": "Permission to access all Planet images.",
                          "layers": [
                            1
                          ]
                        },
                        {
                          "id": 2,
                          "name": "Restricted Access",
                          "description": "Set of functionalities users can access when their restricted access request is approved by the manager.",
                          "components": [
                            "layers",
                            "monitoring",
                            "layers_mosaics",
                            "land_use",
                            "analytics",
                            "admin_panel"
                          ]
                        }
                      ]
                    ],
                    "summary": "Example Response"
                  }
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Permission denied."
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/component/": {
      "get": {
        "operationId": "permission_component_list",
        "description": "Returns all component permissions registered in the system.",
        "summary": "List all ComponentPermissions",
        "tags": [
          "permission"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentPermission"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      [
                        {
                          "id": 1,
                          "name": "Dashboard Access",
                          "description": "Access to dashboard components",
                          "components": [
                            "dashboard",
                            "analytics"
                          ]
                        }
                      ]
                    ],
                    "summary": "Example Response"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/group/{id}/users/": {
      "get": {
        "operationId": "permission_group_users_retrieve",
        "description": "Returns both associated and unassociated users for the specified group.",
        "summary": "Get group users association status",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Group not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/layer/": {
      "get": {
        "operationId": "permission_layer_list",
        "description": "Retrieve a specific layer permission or list all permissions.",
        "summary": "Get layer permission(s)",
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayerPermission"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Permission not found"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "permission_layer_create",
        "description": "Create a new layer permission.",
        "summary": "Create layer permission",
        "tags": [
          "permission"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayerPermission"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad request"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "permission_layer_partial_update",
        "description": "Partially update a layer permission.",
        "summary": "Update layer permission",
        "tags": [
          "permission"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayerPermission"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad request"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Permission not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/layer-diff/{id}/": {
      "get": {
        "operationId": "permission_layer_diff_list",
        "description": "Returns layers that are not associated with the specified permission.",
        "summary": "Get unassociated layers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Layer"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      [
                        {
                          "id": 3,
                          "name": "Unassociated Layer",
                          "group_name": "Default Group"
                        }
                      ]
                    ],
                    "summary": "Example Response"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "LayerPermission not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/layer/{id}/": {
      "get": {
        "operationId": "permission_layer_list_2",
        "description": "Retrieve a specific layer permission or list all permissions.",
        "summary": "Get layer permission(s)",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayerPermission"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Permission not found"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "permission_layer_create_2",
        "description": "Create a new layer permission.",
        "summary": "Create layer permission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LayerPermissionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayerPermission"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad request"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "permission_layer_partial_update_2",
        "description": "Partially update a layer permission.",
        "summary": "Update layer permission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLayerPermissionRequest"
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayerPermission"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Bad request"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Permission not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/role/": {
      "get": {
        "operationId": "permission_role_list",
        "description": "Retrieve a list of all roles along with their associated groups.",
        "summary": "List all roles with their groups",
        "tags": [
          "permission"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleWithGroups"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      [
                        {
                          "id": 1,
                          "name": "Admin",
                          "description": "Administrator role",
                          "groups": [
                            1,
                            2
                          ]
                        }
                      ]
                    ],
                    "summary": "Example Response"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/role-diff/{id}/": {
      "get": {
        "operationId": "permission_role_diff_list",
        "description": "Returns groups that are not associated with the specified role.",
        "summary": "Get unassociated groups",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Role not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/role/{id}/users/": {
      "get": {
        "operationId": "permission_role_users_retrieve",
        "description": "Returns both associated and unassociated users for the specified role.",
        "summary": "Get role users association status",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Role not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permission/role/{id}/users-diff/": {
      "get": {
        "operationId": "permission_role_users_diff_list",
        "description": "Returns users that are not associated with the specified role.",
        "summary": "Get unassociated users",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "permission"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Role not found"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/portal/contato/": {
      "post": {
        "operationId": "portal_contato_create",
        "description": "Processes contact form submissions and sends the information via email.",
        "summary": "Submit contact form",
        "tags": [
          "portal"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {}
              },
              "examples": {
                "ExampleRequest": {
                  "value": {
                    "name": "John",
                    "surname": "Doe",
                    "phone": "+1234567890",
                    "message": "This is a test message",
                    "email": "john.doe@example.com"
                  },
                  "summary": "Example Request"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {}
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Email sent successfully",
                  "examples": {
                    "application/json": {
                      "detail": "Email sent successfully."
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Email sending error",
                  "examples": {
                    "application/json": {
                      "error": "[error details]"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/portal/video/": {
      "get": {
        "operationId": "portal_video_retrieve",
        "description": "Retrieves and serves a video file from the server's media directory.",
        "summary": "Serve video file",
        "tags": [
          "portal"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "File not found",
                  "examples": {
                    "application/json": {
                      "error": "File not found"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Server error accessing file",
                  "examples": {
                    "application/json": {
                      "error": "Error accessing file: [error details]"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/": {
      "get": {
        "operationId": "user_list",
        "description": "Returns a list of all users with their respective sector IDs or creates a new user.",
        "summary": "List or create users",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter users by email (optional)"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "Filter users by username (optional)"
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_create",
        "description": "Returns a list of all users with their respective sector IDs or creates a new user.",
        "summary": "List or create users",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter users by email (optional)"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "Filter users by username (optional)"
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "email": {
                    "type": "string",
                    "description": "User email"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User first name"
                  },
                  "institution": {
                    "type": "integer",
                    "description": "ID of the associated institution"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "List of role IDs"
                  },
                  "is_active": {
                    "type": "boolean",
                    "description": "Indicates if the user is active"
                  }
                },
                "required": [
                  "username",
                  "email"
                ]
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/{id}/": {
      "get": {
        "operationId": "user_retrieve",
        "description": "Retrieves, updates (fully or partially), or deactivates a user based on the provided ID.",
        "summary": "Retrieve, update, or deactivate a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "user_update",
        "description": "Retrieves, updates (fully or partially), or deactivates a user based on the provided ID.",
        "summary": "Retrieve, update, or deactivate a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "email": {
                    "type": "string",
                    "description": "User email"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User first name"
                  },
                  "institution": {
                    "type": "integer",
                    "description": "ID of the associated institution"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "List of role IDs"
                  },
                  "is_active": {
                    "type": "boolean",
                    "description": "Indicates if the user is active"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_partial_update",
        "description": "Retrieves, updates (fully or partially), or deactivates a user based on the provided ID.",
        "summary": "Retrieve, update, or deactivate a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "email": {
                    "type": "string",
                    "description": "User email"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User first name"
                  },
                  "institution": {
                    "type": "integer",
                    "description": "ID of the associated institution"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "List of role IDs"
                  },
                  "is_active": {
                    "type": "boolean",
                    "description": "Indicates if the user is active"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_destroy",
        "description": "Retrieves, updates (fully or partially), or deactivates a user based on the provided ID.",
        "summary": "Retrieve, update, or deactivate a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/": {
      "get": {
        "operationId": "user_access_requests_list",
        "description": "Returns a list of access requests (excluding those pending coordination) or creates a new access request.",
        "summary": "List or create access requests",
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestDetail"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestDetail"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_access_requests_create",
        "description": "Returns a list of access requests (excluding those pending coordination) or creates a new access request.",
        "summary": "List or create access requests",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the requester"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of the requester"
                  },
                  "institution": {
                    "type": "integer",
                    "description": "ID of the institution"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestDetail"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestDetail"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/{id}/": {
      "get": {
        "operationId": "user_access_requests_retrieve",
        "description": "Returns the details of a specific access request based on the ID.",
        "summary": "Retrieve access request details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Access request ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestDetail"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/{id}/approve/": {
      "post": {
        "operationId": "user_access_requests_approve_create",
        "description": "Approves an access request, updates the status, creates a user if necessary, and sends a notification email.",
        "summary": "Approve access request",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Access request ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "selected_group": {
                        "type": "integer",
                        "description": "Institution ID"
                      },
                      "selected_roles": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        },
                        "description": "List of role IDs"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/{id}/pending/": {
      "post": {
        "operationId": "user_access_requests_pending_create_2",
        "description": "Approves an access request by the coordinator, changing its status from PENDING_COORD to PENDING.",
        "summary": "Approve access request by coordinator",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Access request ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/{id}/reject/": {
      "get": {
        "operationId": "user_access_requests_reject_retrieve",
        "description": "Allow access only if the user is an admin.\nCombines multiple permissions defined in permission_classes.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "patch": {
        "operationId": "user_access_requests_reject_partial_update",
        "description": "Rejects a pending access request, updating the status and recording rejection details.",
        "summary": "Reject access request",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Access request ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "denied_details": {
                    "type": "string",
                    "description": "Reason for rejection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/access-requests/pending/": {
      "post": {
        "operationId": "user_access_requests_pending_create",
        "description": "Approves an access request by the coordinator, changing its status from PENDING_COORD to PENDING.",
        "summary": "Approve access request by coordinator",
        "parameters": [
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Access request ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/group/": {
      "get": {
        "operationId": "user_group_list",
        "description": "Returns a list of all groups or creates a new group.",
        "summary": "List or create groups",
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_group_create",
        "description": "Returns a list of all groups or creates a new group.",
        "summary": "List or create groups",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Group name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Group description"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/group-diff/{group_id}/": {
      "get": {
        "operationId": "user_group_diff_retrieve",
        "description": "Returns a list of layer and component permissions not associated with a specific group, based on the group ID.",
        "summary": "List unassociated permissions for a group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/group/{id}/": {
      "get": {
        "operationId": "user_group_retrieve",
        "description": "Retrieves, updates (fully or partially), or deletes a group based on the ID.",
        "summary": "Retrieve, update, or delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "user_group_update",
        "description": "Retrieves, updates (fully or partially), or deletes a group based on the ID.",
        "summary": "Retrieve, update, or delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Group name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Group description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_group_partial_update",
        "description": "Retrieves, updates (fully or partially), or deletes a group based on the ID.",
        "summary": "Retrieve, update, or delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Group name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Group description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_group_destroy",
        "description": "Retrieves, updates (fully or partially), or deletes a group based on the ID.",
        "summary": "Retrieve, update, or delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/institution/": {
      "get": {
        "operationId": "user_institution_list",
        "description": "Returns a list of all institutions or creates a new institution.",
        "summary": "List or create institutions",
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_institution_create",
        "description": "Returns a list of all institutions or creates a new institution.",
        "summary": "List or create institutions",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the institution"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/institution/{id}/": {
      "get": {
        "operationId": "user_institution_retrieve",
        "description": "Retrieves, updates (fully or partially), or deletes an institution based on the ID.",
        "summary": "Retrieve, update, or delete an institution",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Institution ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "user_institution_update",
        "description": "Retrieves, updates (fully or partially), or deletes an institution based on the ID.",
        "summary": "Retrieve, update, or delete an institution",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Institution ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the institution"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_institution_partial_update",
        "description": "Retrieves, updates (fully or partially), or deletes an institution based on the ID.",
        "summary": "Retrieve, update, or delete an institution",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Institution ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the institution"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_institution_destroy",
        "description": "Retrieves, updates (fully or partially), or deletes an institution based on the ID.",
        "summary": "Retrieve, update, or delete an institution",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pk",
            "schema": {
              "type": "integer"
            },
            "description": "Institution ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/logged/": {
      "get": {
        "operationId": "user_logged_retrieve",
        "description": "Returns the data of the authenticated user making the request.",
        "summary": "Retrieve logged-in user data",
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/register/": {
      "post": {
        "operationId": "user_register_create",
        "description": "Creates a new access request and sends a notification email.",
        "summary": "Register access request",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the requester"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of the requester"
                  },
                  "institution": {
                    "type": "integer",
                    "description": "ID of the institution"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              }
            }
          }
        },
        "security": [
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequest"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/role/": {
      "get": {
        "operationId": "user_role_list",
        "description": "Returns a list of all roles or creates a new role.",
        "summary": "List or create roles",
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_role_create",
        "description": "Returns a list of all roles or creates a new role.",
        "summary": "List or create roles",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Role name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Role description"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/role-diff/{group_id}/": {
      "get": {
        "operationId": "user_role_diff_retrieve",
        "description": "Returns a list of layer and component permissions not associated with a specific group, based on the group ID.",
        "summary": "List unassociated permissions for a group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "description": "Group ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/role-diff/{id}/": {
      "get": {
        "operationId": "user_role_diff_retrieve_2",
        "description": "Returns a list of groups not associated with a specific role, based on the role ID.",
        "summary": "List unassociated groups for a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/role-users/{id}/": {
      "get": {
        "operationId": "user_role_users_list",
        "description": "Returns a list of users associated with a specific role, based on the role ID.",
        "summary": "List users associated with a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "role_id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/role/{id}/": {
      "get": {
        "operationId": "user_role_retrieve",
        "description": "Retrieves, updates (fully or partially), or deletes a role based on the ID.",
        "summary": "Retrieve, update, or delete a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "user_role_update",
        "description": "Retrieves, updates (fully or partially), or deletes a role based on the ID.",
        "summary": "Retrieve, update, or delete a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Role name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Role description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_role_partial_update",
        "description": "Retrieves, updates (fully or partially), or deletes a role based on the ID.",
        "summary": "Retrieve, update, or delete a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Role name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Role description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_role_destroy",
        "description": "Retrieves, updates (fully or partially), or deletes a role based on the ID.",
        "summary": "Retrieve, update, or delete a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Role ID",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/update-settings/": {
      "put": {
        "operationId": "user_update_settings_update",
        "description": "Updates the authenticated user's settings, such as dark mode preference.",
        "summary": "Update user settings",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_mode": {
                    "type": "boolean",
                    "description": "Enable or disable dark mode"
                  }
                },
                "required": [
                  "theme_mode"
                ]
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_update_settings_partial_update",
        "description": "Updates the authenticated user's settings, such as dark mode preference.",
        "summary": "Update user settings",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_mode": {
                    "type": "boolean",
                    "description": "Enable or disable dark mode"
                  }
                },
                "required": [
                  "theme_mode"
                ]
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/": {
      "get": {
        "operationId": "user_upload_file_list",
        "description": "Returns a list of files uploaded by the user or creates a new file with associated geometries.",
        "summary": "List or create user-uploaded files",
        "parameters": [
          {
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            },
            "description": "Bounding box: min_lon,min_lat,max_lon,max_lat (optional)"
          },
          {
            "in": "query",
            "name": "is_active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by file name (optional)"
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserUploadedFile"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_upload_file_create",
        "description": "Returns a list of files uploaded by the user or creates a new file with associated geometries.",
        "summary": "List or create user-uploaded files",
        "parameters": [
          {
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "in_bbox",
            "schema": {
              "type": "string"
            },
            "description": "Bounding box: min_lon,min_lat,max_lon,max_lat (optional)"
          },
          {
            "in": "query",
            "name": "is_active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by file name (optional)"
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "File name"
                  },
                  "geometry": {
                    "type": "object",
                    "description": "GeoJSON containing the geometries",
                    "properties": {
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "List of GeoJSON features"
                      }
                    }
                  },
                  "properties": {
                    "type": "object",
                    "description": "Additional properties (optional)"
                  }
                },
                "required": [
                  "name",
                  "geometry"
                ]
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserUploadedFile"
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/{id}/": {
      "get": {
        "operationId": "user_upload_file_retrieve",
        "description": "Retrieves, updates (fully or partially), or deletes a user-uploaded file based on the ID.",
        "summary": "Retrieve, update, or delete an uploaded file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFile"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "user_upload_file_update",
        "description": "Retrieves, updates (fully or partially), or deletes a user-uploaded file based on the ID.",
        "summary": "Retrieve, update, or delete an uploaded file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "File name"
                  },
                  "geometry": {
                    "type": "object",
                    "description": "GeoJSON containing geometries"
                  },
                  "properties": {
                    "type": "object",
                    "description": "Additional properties"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFile"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_upload_file_partial_update",
        "description": "Retrieves, updates (fully or partially), or deletes a user-uploaded file based on the ID.",
        "summary": "Retrieve, update, or delete an uploaded file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "File name"
                  },
                  "geometry": {
                    "type": "object",
                    "description": "GeoJSON containing geometries"
                  },
                  "properties": {
                    "type": "object",
                    "description": "Additional properties"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFile"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_upload_file_destroy",
        "description": "Retrieves, updates (fully or partially), or deletes a user-uploaded file based on the ID.",
        "summary": "Retrieve, update, or delete an uploaded file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFile"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/geo/{id}/": {
      "get": {
        "operationId": "user_upload_file_geo_list",
        "description": "Returns a list of geometries associated with a user-uploaded file, filtered by the file ID.",
        "summary": "List geometries of an uploaded file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFileGeometryListList"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/geo/{id}/update-properties/": {
      "put": {
        "operationId": "user_upload_file_geo_update_properties_update",
        "description": "Allow to access view only if authenticated.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUploadedFileGeometryListRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserUploadedFileGeometryListRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUploadedFileGeometryListRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFileGeometryList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_upload_file_geo_update_properties_partial_update",
        "description": "Partially updates the properties (e.g., color or name) of an uploaded file geometry based on the ID.",
        "summary": "Update properties of an uploaded file geometry",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file geometry",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "color": {
                    "type": "string",
                    "description": "Color of the geometry"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the geometry"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/geo/detail/{id}/": {
      "get": {
        "operationId": "user_upload_file_geo_detail_retrieve",
        "description": "Returns the details of a specific geometry uploaded by the user, based on the provided ID.",
        "summary": "Retrieve details of an uploaded file geometry",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the uploaded file geometry",
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadedFileGeometryDetail"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user/upload-file/list/": {
      "get": {
        "operationId": "user_upload_file_list_list",
        "description": "Returns a list of files uploaded by the authenticated user.",
        "summary": "List user-uploaded files",
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserUploadedFile"
                  }
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessRequest": {
        "type": "object",
        "description": "Serializer for AccessRequest model data.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the requester",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the requester",
            "maxLength": 254
          },
          "department": {
            "type": "string",
            "description": "Department of the requester",
            "maxLength": 255
          },
          "user_siape_registration": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "SIAPE registration of the requester"
          },
          "coordinator_name": {
            "type": "string",
            "description": "Name of the coordinator",
            "maxLength": 255
          },
          "coordinator_email": {
            "type": "string",
            "format": "email",
            "description": "Email of the coordinator",
            "maxLength": 254
          },
          "coordinator_department": {
            "type": "string",
            "description": "Department of the coordinator",
            "maxLength": 255
          },
          "coordinator_siape_registration": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "SIAPE registration of the coordinator"
          },
          "attachment": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Optional file with further details"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "readOnly": true,
            "description": "Current status of the access request\n\n* `1` - Pendente\n* `2` - Concedida\n* `3` - Recusada\n* `4` - Pendente Coordenador"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when the request was created"
          },
          "reviewed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when the request was reviewed (approved or denied)"
          },
          "reviewed_by": {
            "type": "integer",
            "nullable": true,
            "description": "User who reviewed this request"
          },
          "denied_details": {
            "type": "string",
            "nullable": true,
            "description": "Details or reason for denial (if status=Recusada)",
            "maxLength": 255
          }
        },
        "required": [
          "coordinator_department",
          "coordinator_email",
          "coordinator_name",
          "coordinator_siape_registration",
          "created_at",
          "department",
          "email",
          "id",
          "name",
          "reviewed_at",
          "status",
          "user_siape_registration"
        ]
      },
      "AccessRequestDetail": {
        "type": "object",
        "description": "Serializer to return detailed information about an AccessRequest.\nIncludes status details and formatted fields.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the requester",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the requester",
            "maxLength": 254
          },
          "department": {
            "type": "string",
            "description": "Department of the requester",
            "maxLength": 255
          },
          "user_siape_registration": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "SIAPE registration of the requester"
          },
          "coordinator_name": {
            "type": "string",
            "description": "Name of the coordinator",
            "maxLength": 255
          },
          "coordinator_email": {
            "type": "string",
            "format": "email",
            "description": "Email of the coordinator",
            "maxLength": 254
          },
          "coordinator_department": {
            "type": "string",
            "description": "Department of the coordinator",
            "maxLength": 255
          },
          "coordinator_siape_registration": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "SIAPE registration of the coordinator"
          },
          "attachment": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Optional file with further details"
          },
          "created_at_formatted": {
            "type": "string",
            "readOnly": true
          },
          "status_name": {
            "type": "string",
            "readOnly": true
          },
          "reviewed_at_formatted": {
            "type": "string",
            "readOnly": true
          },
          "reviewed_by_name": {
            "type": "string",
            "readOnly": true
          },
          "denied_details": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "coordinator_department",
          "coordinator_email",
          "coordinator_name",
          "coordinator_siape_registration",
          "created_at_formatted",
          "denied_details",
          "department",
          "email",
          "id",
          "name",
          "reviewed_at_formatted",
          "reviewed_by_name",
          "status_name",
          "user_siape_registration"
        ]
      },
      "ActionFlagEnum": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "* `1` - Adição\n* `2` - Modificar\n* `3` - Eliminação"
      },
      "AlertsClassesSerializers": {
        "type": "object",
        "description": "Serializer to list classification stages adopted in mapping the\nmonitoring of indigenous land.",
        "properties": {
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          }
        }
      },
      "AlertsDetailSerializers": {
        "type": "object",
        "description": "Serializer to return detailed `models.UrgentAlerts` data.",
        "properties": {
          "id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Polygon identifier and primary key"
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code - Indigenou Lands"
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Indigenou Lands name",
            "maxLength": 255
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "nu_referencia": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Alert sequential number"
          },
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          },
          "no_imagem": {
            "type": "string",
            "nullable": true,
            "title": "Image identifier",
            "maxLength": 255
          },
          "dt_t_zero": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Data before changes detects"
          },
          "dt_t_um": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Change start date"
          },
          "nu_area_ha": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,11}(?:\\.\\d{0,3})?$",
            "nullable": true,
            "title": "Area polygon ha"
          },
          "nu_longitude": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,10}(?:\\.\\d{0,10})?$",
            "nullable": true,
            "title": "Longitude"
          },
          "nu_latitude": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,10}(?:\\.\\d{0,10})?$",
            "nullable": true,
            "title": "Latitude"
          },
          "no_municipio": {
            "type": "string",
            "nullable": true,
            "title": "City name",
            "maxLength": 255
          },
          "sg_uf": {
            "type": "string",
            "nullable": true,
            "title": "Abbreviation name",
            "maxLength": 255
          }
        },
        "required": [
          "id"
        ]
      },
      "AlertsSerializers": {
        "type": "object",
        "description": "Serializer for geographic `models.UrgentAlerts` spatial data.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Polygon identifier and primary key"
              },
              "no_estagio": {
                "type": "string",
                "nullable": true,
                "title": "Stage name",
                "maxLength": 255
              },
              "nu_latitude": {
                "type": "string",
                "format": "decimal",
                "pattern": "^-?\\d{0,10}(?:\\.\\d{0,10})?$",
                "nullable": true,
                "title": "Latitude"
              },
              "nu_longitude": {
                "type": "string",
                "format": "decimal",
                "pattern": "^-?\\d{0,10}(?:\\.\\d{0,10})?$",
                "nullable": true,
                "title": "Longitude"
              }
            }
          }
        }
      },
      "AlertsSerializersList": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureCollectionEnum"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertsSerializers"
            }
          }
        }
      },
      "AlertsTableSerializers": {
        "type": "object",
        "description": "Serializer to return data without geometry from `models.UrgentAlerts`\ndata.",
        "properties": {
          "id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Polygon identifier and primary key"
          },
          "no_ciclo": {
            "type": "string",
            "nullable": true,
            "title": "Cycle of monitoring Indigenous Lands in the Legal Amazon",
            "maxLength": 255
          },
          "no_titulo": {
            "type": "string",
            "nullable": true,
            "title": "Map title - header",
            "maxLength": 255
          },
          "no_arquivo": {
            "type": "string",
            "nullable": true,
            "title": "Map title - generated in PDF",
            "maxLength": 255
          },
          "nu_referencia": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Alert sequential number"
          },
          "nu_mapa": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Map number"
          },
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          },
          "no_imagem": {
            "type": "string",
            "nullable": true,
            "title": "Image identifier",
            "maxLength": 255
          },
          "nu_orbita_ponto": {
            "type": "string",
            "nullable": true,
            "title": "Satellit Sentinel orbit and point",
            "maxLength": 255
          },
          "dt_t_zero": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Data before changes detects"
          },
          "dt_t_um": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Change start date"
          },
          "nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code - Indigenou Lands"
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Indigenou Lands name",
            "maxLength": 255
          },
          "co_cr": {
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "format": "int64",
            "nullable": true,
            "title": "Regional Coordination code"
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "no_municipio": {
            "type": "string",
            "nullable": true,
            "title": "City name",
            "maxLength": 255
          },
          "sg_uf": {
            "type": "string",
            "nullable": true,
            "title": "Abbreviation name",
            "maxLength": 255
          },
          "nu_longitude": {
            "type": "string",
            "readOnly": true
          },
          "nu_latitude": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "nu_area_ha",
          "nu_latitude",
          "nu_longitude"
        ]
      },
      "BlankEnum": {
        "enum": [
          ""
        ]
      },
      "ChangePasswordRequestRequest": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "minLength": 1
          },
          "newPassword1": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "newPassword1",
          "oldPassword"
        ]
      },
      "ChangePasswordSuccess": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string"
          },
          "access": {
            "type": "string"
          }
        },
        "required": [
          "access",
          "refresh"
        ]
      },
      "ComponentPermission": {
        "type": "object",
        "description": "Serializer for the ComponentPermission model, returning all fields.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentsEnum"
            }
          }
        },
        "required": [
          "description",
          "id",
          "name"
        ]
      },
      "ComponentsEnum": {
        "enum": [
          "layers",
          "monitoring",
          "layers_mosaics",
          "layers_planet",
          "land_use",
          "analytics",
          "admin_panel",
          "feedback_dev",
          "feedback_admin"
        ],
        "type": "string",
        "description": "* `layers` - Camadas de Sobreposição\n* `monitoring` - Monitoramento Diário\n* `layers_mosaics` - Alta Resolução e Mosaicos\n* `layers_planet` - Camadas Planet\n* `land_use` - Uso e Ocupação do Solo\n* `analytics` - Módulo Analítico\n* `admin_panel` - Painel Administrativo\n* `feedback_dev` - Críticas e Sugestões Dev\n* `feedback_admin` - Críticas e Sugestões ADM"
      },
      "CoordenacaoRegional": {
        "type": "object",
        "description": "CoordenacaoRegionalSerializer model data.",
        "properties": {
          "co_cr": {
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "format": "int64",
            "title": "COD Coordenção Regional"
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Coordenação Regional",
            "maxLength": 255
          },
          "no_regiao": {
            "type": "string",
            "nullable": true,
            "title": "Região",
            "maxLength": 255
          }
        }
      },
      "CustomTokenObtainPair": {
        "type": "object",
        "description": "Custom serializer to authenticate users and generate tokens.\nFor @funai.gov.br users, authentication is done via AD only.",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "CustomTokenObtainPairRequest": {
        "type": "object",
        "description": "Custom serializer to authenticate users and generate tokens.\nFor @funai.gov.br users, authentication is done via AD only.",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          }
        },
        "required": [
          "password",
          "username"
        ]
      },
      "DashboardData": {
        "type": "object",
        "description": "Serializer for the DashboardData model to format and customize the data.\n\nAttributes:\n- user: A custom field to include the username instead of user ID.\n- last_date_login: A custom field to format the date and time of the last login.\n\nMethods:\n- get_user: Returns the username associated with the DashboardData object.\n- get_last_date_login: Formats the last login date and time.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "last_date_login": {
            "type": "string",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "title": "Localização",
            "maxLength": 255
          },
          "ip": {
            "type": "string",
            "maxLength": 255
          },
          "type_device": {
            "type": "string",
            "maxLength": 255
          },
          "browser": {
            "type": "string",
            "maxLength": 255
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": [
          "browser",
          "id",
          "ip",
          "last_date_login",
          "location",
          "type_device"
        ]
      },
      "Filter": {
        "type": "object",
        "description": "FilterSerializer to serialize `models.Filter`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "default": {
            "type": "string",
            "nullable": true,
            "title": "Default value for filters",
            "description": "Shows default value for filter on app",
            "maxLength": 40
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "title": "Filter alias",
            "description": "Indicates which field will be filtered on app",
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "title": "Filter Type",
            "description": "Type of filter on app",
            "maxLength": 40
          },
          "label": {
            "type": "string",
            "title": "Filter Label",
            "description": "A default label for filter",
            "maxLength": 40
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "id",
          "label",
          "type"
        ]
      },
      "GeoTerraIndigena": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "MultiPolygon"
                ]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 4
                  },
                  "example": [
                    [
                      [
                        0,
                        0
                      ],
                      [
                        0,
                        50
                      ],
                      [
                        50,
                        50
                      ],
                      [
                        50,
                        0
                      ],
                      [
                        0,
                        0
                      ]
                    ]
                  ]
                }
              }
            }
          },
          "properties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "ds_cr": {
                "type": "string",
                "readOnly": true
              },
              "instrumentos_gestao": {
                "type": "string",
                "readOnly": true
              },
              "no_ti": {
                "type": "string",
                "title": "Terra Indígema",
                "maxLength": 255
              },
              "co_funai": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "COD Funai"
              },
              "no_grupo_etnico": {
                "type": "string",
                "nullable": true,
                "title": "Grupo Étnico",
                "maxLength": 255
              },
              "ds_fase_ti": {
                "type": "string",
                "nullable": true,
                "title": "Fase TI",
                "maxLength": 100
              },
              "ds_modalidade": {
                "type": "string",
                "nullable": true,
                "title": "Modalidade TI",
                "maxLength": 100
              },
              "ds_reestudo_ti": {
                "type": "string",
                "nullable": true,
                "title": "Reestudo TI",
                "maxLength": 80
              },
              "no_municipio": {
                "type": "string",
                "nullable": true
              },
              "sg_uf": {
                "type": "string",
                "nullable": true,
                "maxLength": 20
              },
              "st_faixa_fronteira": {
                "type": "string",
                "nullable": true,
                "maxLength": 3
              },
              "dt_em_estudo": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "ds_portaria_em_estudo": {
                "type": "string",
                "nullable": true
              },
              "dt_delimitada": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "ds_despacho_delimitada": {
                "type": "string",
                "nullable": true
              },
              "dt_declarada": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "ds_portaria_declarada": {
                "type": "string",
                "nullable": true
              },
              "dt_homologada": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "ds_decreto_homologada": {
                "type": "string",
                "nullable": true
              },
              "dt_regularizada": {
                "type": "string",
                "format": "date",
                "nullable": true
              },
              "ds_matricula_regularizada": {
                "type": "string",
                "nullable": true
              },
              "ds_doc_resumo_em_estudo": {
                "type": "string",
                "nullable": true
              },
              "ds_doc_resumo_delimitada": {
                "type": "string",
                "nullable": true
              },
              "ds_doc_resumo_declarada": {
                "type": "string",
                "nullable": true
              },
              "ds_doc_resumo_homologada": {
                "type": "string",
                "nullable": true
              },
              "ds_doc_resumo_regularizada": {
                "type": "string",
                "nullable": true
              },
              "nu_area_ha": {
                "type": "string",
                "format": "decimal",
                "pattern": "^-?\\d{0,98}(?:\\.\\d{0,2})?$",
                "nullable": true
              },
              "dt_cadastro": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "possui_ig": {
                "type": "boolean"
              },
              "co_cr": {
                "type": "integer",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "format": "int64",
                "title": "COD Coordenção Regional"
              }
            }
          }
        }
      },
      "GeoTerraIndigenaList": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureCollectionEnum"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoTerraIndigena"
            }
          }
        }
      },
      "GisFeatureCollectionEnum": {
        "type": "string",
        "enum": [
          "FeatureCollection"
        ]
      },
      "GisFeatureEnum": {
        "type": "string",
        "enum": [
          "Feature"
        ]
      },
      "Group": {
        "type": "object",
        "description": "GroupSerializer to serialize `models.Group`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "layers": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Group Layer name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Ordem",
            "description": "Order to show on app"
          },
          "category_groups": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "layers",
          "name",
          "order"
        ]
      },
      "GroupComplete": {
        "type": "object",
        "description": "GroupSerializer to serialize `models.Group`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "layers": {
            "type": "array",
            "items": {},
            "description": "Get layers from object.\n\nArgs:\n    obj (models.Group): model instance.\n\nReturns:\n    list: layers list.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Group Layer name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Ordem",
            "description": "Order to show on app"
          },
          "category_groups": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "layers",
          "name",
          "order"
        ]
      },
      "GroupCompleteRequest": {
        "type": "object",
        "description": "GroupSerializer to serialize `models.Group`.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Group Layer name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Ordem",
            "description": "Order to show on app"
          },
          "category_groups": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "GroupRequest": {
        "type": "object",
        "description": "GroupSerializer to serialize `models.Group`.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Group Layer name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Ordem",
            "description": "Order to show on app"
          },
          "category_groups": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "GroupSimple": {
        "type": "object",
        "description": "Serializer for the Group model, returning only 'id' and 'name' fields.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Institution": {
        "type": "object",
        "description": "UsageInstitutionSerializer serializer class.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Institution",
            "maxLength": 255
          },
          "institution_type": {
            "nullable": true,
            "description": "Type\n\n* `FUNAI Sede` - FUNAI Sede\n* `Outros` - Outros",
            "oneOf": [
              {
                "$ref": "#/components/schemas/InstitutionTypeEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "InstitutionTypeEnum": {
        "enum": [
          "FUNAI Sede",
          "Outros"
        ],
        "type": "string",
        "description": "* `FUNAI Sede` - FUNAI Sede\n* `Outros` - Outros"
      },
      "InstrumentoGestao": {
        "type": "object",
        "description": "Instrumento de Gestão data",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Cod Funai"
          },
          "no_ti": {
            "type": "string",
            "title": "Terras Indígena"
          },
          "no_regiao": {
            "type": "string",
            "title": "Região"
          },
          "sg_uf": {
            "type": "string",
            "title": "UF"
          },
          "no_povo": {
            "type": "string",
            "title": "Povos"
          },
          "no_bioma": {
            "type": "string",
            "title": "Bioma"
          },
          "ds_parceiros": {
            "type": "string",
            "title": "Parceiros"
          },
          "cr_funai": {
            "type": "string",
            "title": "Nome Funai"
          },
          "no_ig": {
            "type": "string",
            "title": "Instrumento"
          },
          "ds_status": {
            "type": "string",
            "title": "Status"
          },
          "nu_ano_elaboracao": {
            "type": "string",
            "title": "Elaborado em"
          },
          "ds_disp_meio_local": {
            "type": "string",
            "title": "Disponível em"
          },
          "ds_ttl_publi": {
            "type": "string"
          },
          "ds_obs": {
            "type": "string",
            "title": "Observação"
          },
          "dt_cadastro": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "title": "Data Registro"
          }
        },
        "required": [
          "co_funai",
          "id"
        ]
      },
      "InstrumentoGestaoRequest": {
        "type": "object",
        "description": "Instrumento de Gestão data",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Cod Funai"
          },
          "no_ti": {
            "type": "string",
            "title": "Terras Indígena"
          },
          "no_regiao": {
            "type": "string",
            "title": "Região"
          },
          "sg_uf": {
            "type": "string",
            "title": "UF"
          },
          "no_povo": {
            "type": "string",
            "title": "Povos"
          },
          "no_bioma": {
            "type": "string",
            "title": "Bioma"
          },
          "ds_parceiros": {
            "type": "string",
            "title": "Parceiros"
          },
          "cr_funai": {
            "type": "string",
            "title": "Nome Funai"
          },
          "no_ig": {
            "type": "string",
            "title": "Instrumento"
          },
          "ds_status": {
            "type": "string",
            "title": "Status"
          },
          "nu_ano_elaboracao": {
            "type": "string",
            "title": "Elaborado em"
          },
          "ds_disp_meio_local": {
            "type": "string",
            "title": "Disponível em"
          },
          "ds_ttl_publi": {
            "type": "string"
          },
          "ds_obs": {
            "type": "string",
            "title": "Observação"
          },
          "dt_cadastro": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "title": "Data Registro"
          }
        },
        "required": [
          "co_funai"
        ]
      },
      "LandUse": {
        "type": "object",
        "description": "Serializer for geographic `models.LandUseClasses` spatial data.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Primary key"
              },
              "no_estagio": {
                "type": "string",
                "nullable": true,
                "title": "Stage name land use mapping",
                "maxLength": 255
              },
              "nu_latitude": {
                "type": "string",
                "readOnly": true
              },
              "nu_longitude": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        }
      },
      "LandUseDetail": {
        "type": "object",
        "description": "Serializer for return detailed `models.LandUseClasses` data.",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code for Indigenous Land"
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Name of Indigenous Lands",
            "maxLength": 255
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "sg_uf": {
            "type": "string",
            "nullable": true,
            "title": "Brazilian states flag",
            "maxLength": 255
          },
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name land use mapping",
            "maxLength": 255
          },
          "no_satelites": {
            "type": "string",
            "nullable": true,
            "title": "Satellites used in mapping",
            "maxLength": 255
          },
          "dt_imagens": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_ha": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "dt_imagens",
          "nu_area_ha"
        ]
      },
      "LandUseList": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureCollectionEnum"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LandUse"
            }
          }
        }
      },
      "LandUseSearch": {
        "type": "object",
        "description": "Serializer para busca em LandUseVmRegionalCoordnation.",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code for Indigenous Land"
          },
          "co_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination code",
            "maxLength": 255
          },
          "nu_ano": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Reference mapping year"
          },
          "ds_cr": {
            "type": "string",
            "readOnly": true
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Name of Indigenous Lands",
            "maxLength": 255
          },
          "cr_no_regiao": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "cr_no_regiao",
          "ds_cr"
        ]
      },
      "LandUseTable": {
        "type": "object",
        "description": "Serializer for return data from model `LandUsePerTi`.",
        "properties": {
          "id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Primary key"
          },
          "sg_uf": {
            "type": "string",
            "nullable": true,
            "title": "Brazilian states flag",
            "maxLength": 255
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Name of Indigenous Lands",
            "maxLength": 255
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code for Indigenous Land"
          },
          "co_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination code",
            "maxLength": 255
          },
          "dt_homologada": {
            "type": "string",
            "nullable": true,
            "title": "Date of ratification of Indigenous Lands",
            "maxLength": 255
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "nu_ano": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Reference mapping year"
          },
          "no_satelites": {
            "type": "string",
            "nullable": true,
            "title": "Name of Satelites Data",
            "maxLength": 255
          },
          "nu_resolucoes": {
            "type": "string",
            "nullable": true,
            "title": "Number of Resolutions",
            "maxLength": 255
          },
          "dt_imagens": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_ag_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_cr_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_dg_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_ma_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_no_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_rv_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_sv_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_vi_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_vn_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_mi_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_km2": {
            "type": "string",
            "readOnly": true
          },
          "nu_latitude": {
            "type": "string",
            "readOnly": true
          },
          "nu_longitude": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "dt_imagens",
          "id",
          "nu_area_ag_ha",
          "nu_area_cr_ha",
          "nu_area_dg_ha",
          "nu_area_ha",
          "nu_area_km2",
          "nu_area_ma_ha",
          "nu_area_mi_ha",
          "nu_area_no_ha",
          "nu_area_rv_ha",
          "nu_area_sv_ha",
          "nu_area_vi_ha",
          "nu_area_vn_ha",
          "nu_latitude",
          "nu_longitude"
        ]
      },
      "Layer": {
        "type": "object",
        "description": "LayerSerializer to serialize `models.Layer`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "bbox": {
            "type": "string",
            "description": "Get bbox from object.\n\nArgs:\n    obj (models.Layer): model instance.\n\nReturns:\n    str: Bbox extent.",
            "readOnly": true
          },
          "wms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Wms"
              }
            ],
            "readOnly": true
          },
          "tms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tms"
              }
            ],
            "readOnly": true
          },
          "vector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Vector"
              }
            ],
            "readOnly": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "group_name": {
            "type": "string",
            "description": "Get the name of the group related to the layer.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Ordem"
          },
          "layer_type": {
            "type": "string",
            "maxLength": 40
          },
          "active_on_init": {
            "type": "boolean",
            "description": "Show layer as active when app starts"
          },
          "is_downloadable": {
            "type": "boolean",
            "description": "Enable layer download"
          },
          "fonte": {
            "type": "string",
            "maxLength": 255
          },
          "is_public": {
            "type": "boolean"
          },
          "dt_atualizacao": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Atualização"
          },
          "database_layer_name": {
            "type": "string",
            "maxLength": 255
          },
          "group": {
            "type": "integer"
          }
        },
        "required": [
          "bbox",
          "database_layer_name",
          "filters",
          "group",
          "group_name",
          "id",
          "layer_type",
          "name",
          "tms",
          "vector",
          "wms"
        ]
      },
      "LayerPermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "layers": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "description",
          "id",
          "layers",
          "name"
        ]
      },
      "LayerPermissionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "layer_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "writeOnly": true
            },
            "writeOnly": true
          }
        },
        "required": [
          "description",
          "layer_ids",
          "name"
        ]
      },
      "LimiteTerraIndigena": {
        "type": "object",
        "description": "LimiteTerraIndigenaSerializer data.",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "COD Funai"
          },
          "no_ti": {
            "type": "string",
            "title": "Terra Indígema",
            "maxLength": 255
          }
        },
        "required": [
          "co_funai",
          "no_ti"
        ]
      },
      "LogEntry": {
        "type": "object",
        "description": "Serializer for the LogEntry model, used to represent system activity logs.\n\nCustom fields:\n- user: Username associated with the action, if available.\n- user_institution: Name of the institution linked to the user, if applicable.\n- user_is_active: Indicates whether the user was active at the time of the action.\n- action_time: Formatted date and time of the action.\n- action_flag_display: Human-readable description of the action (Added, Changed, Deleted).\n\nModel fields:\n- id: Log entry identifier.\n- action_flag: Numeric code of the action (1 = added, 2 = changed, 3 = deleted).\n- change_message: Descriptive message of the change.\n- content_type: Type of the affected content.\n- object_id: ID of the affected object.\n- object_repr: Text representation of the affected object.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "readOnly": true
          },
          "user_institution": {
            "type": "string",
            "readOnly": true
          },
          "user_is_active": {
            "type": "string",
            "readOnly": true
          },
          "action_time": {
            "type": "string",
            "format": "date-time"
          },
          "action_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionFlagEnum"
              }
            ],
            "title": "Flag de ação",
            "minimum": 0,
            "maximum": 32767
          },
          "action_flag_display": {
            "type": "string",
            "readOnly": true
          },
          "change_message": {
            "type": "string",
            "title": "Modificar mensagem"
          },
          "content_type": {
            "type": "integer",
            "nullable": true,
            "title": "Tipo de conteúdo"
          },
          "object_id": {
            "type": "string",
            "nullable": true,
            "title": "Id do objeto"
          },
          "object_repr": {
            "type": "string",
            "title": "Repr do objeto",
            "maxLength": 200
          }
        },
        "required": [
          "action_flag",
          "action_flag_display",
          "action_time",
          "id",
          "object_repr",
          "user",
          "user_institution",
          "user_is_active"
        ]
      },
      "LogoutRequestRequest": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "refresh"
        ]
      },
      "MapStatsResponse": {
        "type": "object",
        "properties": {
          "area_ha": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "area_ha",
          "total"
        ]
      },
      "MonitoringConsolidated": {
        "type": "object",
        "description": "Serializer for `models.MonitoringConsolidated` data.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Polygon identifier and primary key"
              },
              "no_imagem": {
                "type": "string",
                "nullable": true,
                "title": "Image identifier",
                "maxLength": 255
              },
              "dt_imagem": {
                "type": "string",
                "readOnly": true
              },
              "no_estagio": {
                "type": "string",
                "nullable": true,
                "title": "Stage name",
                "maxLength": 255
              },
              "nu_orbita": {
                "type": "string",
                "nullable": true,
                "title": "Satellit Sentinel orbit",
                "maxLength": 255
              },
              "nu_ponto": {
                "type": "string",
                "nullable": true,
                "title": "Orbit point",
                "maxLength": 255
              },
              "nu_latitude": {
                "type": "string",
                "readOnly": true
              },
              "nu_longitude": {
                "type": "string",
                "readOnly": true
              },
              "dt_t_zero": {
                "type": "string",
                "readOnly": true
              },
              "dt_t_um": {
                "type": "string",
                "readOnly": true
              },
              "co_funai": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "nullable": true,
                "title": "Funai code - Indigenou Lands"
              },
              "nu_area_km2": {
                "type": "string",
                "format": "decimal",
                "pattern": "^-?\\d{0,11}(?:\\.\\d{0,3})?$",
                "nullable": true,
                "title": "Area polygon km2"
              },
              "nu_area_ha": {
                "type": "string",
                "readOnly": true
              },
              "co_cr": {
                "type": "integer",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "format": "int64",
                "nullable": true,
                "title": "Funai code"
              },
              "ds_cr": {
                "type": "string",
                "nullable": true,
                "title": "Regional Coordination name",
                "maxLength": 255
              },
              "no_ti": {
                "type": "string",
                "nullable": true,
                "title": "Indigenou Lands name",
                "maxLength": 255
              },
              "ti_nu_area_ha": {
                "type": "string",
                "format": "decimal",
                "pattern": "^-?\\d{0,11}(?:\\.\\d{0,3})?$",
                "nullable": true,
                "title": "Area Indigenou Lands ha"
              }
            }
          }
        }
      },
      "MonitoringConsolidatedByDay": {
        "type": "object",
        "description": "Serializer for table `models.MonitoringConsolidated` data.",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code - Indigenou Lands"
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Indigenou Lands name",
            "maxLength": 255
          },
          "dt_t_um": {
            "type": "string",
            "readOnly": true
          },
          "ti_nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "cr_nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "dg_nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "dr_nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "ff_nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "total_nu_area_ha": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "cr_nu_area_ha",
          "dg_nu_area_ha",
          "dr_nu_area_ha",
          "dt_t_um",
          "ff_nu_area_ha",
          "ti_nu_area_ha",
          "total_nu_area_ha"
        ]
      },
      "MonitoringConsolidatedClasses": {
        "type": "object",
        "description": "Serializer for stages 'models.MonitoringConsolidated' data.",
        "properties": {
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          }
        }
      },
      "MonitoringConsolidatedDetail": {
        "type": "object",
        "description": "Serializer for detailed `models.MonitoringConsolidated` data.",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code - Indigenou Lands"
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Indigenou Lands name",
            "maxLength": 255
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          },
          "no_imagem": {
            "type": "string",
            "nullable": true,
            "title": "Image identifier",
            "maxLength": 255
          },
          "dt_t_zero": {
            "type": "string",
            "readOnly": true
          },
          "dt_t_um": {
            "type": "string",
            "readOnly": true
          },
          "nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "nu_latitude": {
            "type": "string",
            "readOnly": true
          },
          "nu_longitude": {
            "type": "string",
            "readOnly": true
          },
          "ti_nu_area_ha": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "dt_t_um",
          "dt_t_zero",
          "nu_area_ha",
          "nu_latitude",
          "nu_longitude",
          "ti_nu_area_ha"
        ]
      },
      "MonitoringConsolidatedList": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureCollectionEnum"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringConsolidated"
            }
          }
        }
      },
      "MonitoringConsolidatedTable": {
        "type": "object",
        "description": "Serializer for table 'models.MonitoringConsolidated' data.",
        "properties": {
          "id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Polygon identifier and primary key"
          },
          "no_imagem": {
            "type": "string",
            "nullable": true,
            "title": "Image identifier",
            "maxLength": 255
          },
          "dt_imagem": {
            "type": "string",
            "readOnly": true
          },
          "no_estagio": {
            "type": "string",
            "nullable": true,
            "title": "Stage name",
            "maxLength": 255
          },
          "nu_orbita": {
            "type": "string",
            "nullable": true,
            "title": "Satellit Sentinel orbit",
            "maxLength": 255
          },
          "nu_ponto": {
            "type": "string",
            "nullable": true,
            "title": "Orbit point",
            "maxLength": 255
          },
          "nu_latitude": {
            "type": "string",
            "readOnly": true
          },
          "nu_longitude": {
            "type": "string",
            "readOnly": true
          },
          "dt_t_zero": {
            "type": "string",
            "readOnly": true
          },
          "dt_t_um": {
            "type": "string",
            "readOnly": true
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Funai code - Indigenou Lands"
          },
          "nu_area_km2": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,11}(?:\\.\\d{0,3})?$",
            "nullable": true,
            "title": "Area polygon km2"
          },
          "nu_area_ha": {
            "type": "string",
            "readOnly": true
          },
          "co_cr": {
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "format": "int64",
            "nullable": true,
            "title": "Funai code"
          },
          "ds_cr": {
            "type": "string",
            "nullable": true,
            "title": "Regional Coordination name",
            "maxLength": 255
          },
          "no_ti": {
            "type": "string",
            "nullable": true,
            "title": "Indigenou Lands name",
            "maxLength": 255
          },
          "ti_nu_area_ha": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "dt_imagem",
          "dt_t_um",
          "dt_t_zero",
          "id",
          "nu_area_ha",
          "nu_latitude",
          "nu_longitude",
          "ti_nu_area_ha"
        ]
      },
      "NullEnum": {
        "enum": [
          null
        ]
      },
      "PasswordResetConfirmRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "minLength": 1
          },
          "new_password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "confirm_password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          }
        },
        "required": [
          "code",
          "confirm_password",
          "new_password"
        ]
      },
      "PasswordResetRequestRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          }
        },
        "required": [
          "email"
        ]
      },
      "PatchedGroupRequest": {
        "type": "object",
        "description": "GroupSerializer to serialize `models.Group`.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Group Layer name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Ordem",
            "description": "Order to show on app"
          },
          "category_groups": {
            "type": "integer"
          }
        }
      },
      "PatchedInstrumentoGestaoRequest": {
        "type": "object",
        "description": "Instrumento de Gestão data",
        "properties": {
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "Cod Funai"
          },
          "no_ti": {
            "type": "string",
            "title": "Terras Indígena"
          },
          "no_regiao": {
            "type": "string",
            "title": "Região"
          },
          "sg_uf": {
            "type": "string",
            "title": "UF"
          },
          "no_povo": {
            "type": "string",
            "title": "Povos"
          },
          "no_bioma": {
            "type": "string",
            "title": "Bioma"
          },
          "ds_parceiros": {
            "type": "string",
            "title": "Parceiros"
          },
          "cr_funai": {
            "type": "string",
            "title": "Nome Funai"
          },
          "no_ig": {
            "type": "string",
            "title": "Instrumento"
          },
          "ds_status": {
            "type": "string",
            "title": "Status"
          },
          "nu_ano_elaboracao": {
            "type": "string",
            "title": "Elaborado em"
          },
          "ds_disp_meio_local": {
            "type": "string",
            "title": "Disponível em"
          },
          "ds_ttl_publi": {
            "type": "string"
          },
          "ds_obs": {
            "type": "string",
            "title": "Observação"
          },
          "dt_cadastro": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "title": "Data Registro"
          }
        }
      },
      "PatchedLayerPermissionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "layer_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "writeOnly": true
            },
            "writeOnly": true
          }
        }
      },
      "PatchedTicketStatusRequest": {
        "type": "object",
        "properties": {
          "due_on": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "status_category": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StatusCategoryEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "priority_code": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriorityCodeEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          }
        }
      },
      "PreviewTypeEnum": {
        "enum": [
          "thumbnail",
          "preview"
        ],
        "type": "string",
        "description": "* `thumbnail` - Thumbnail\n* `preview` - Preview"
      },
      "PriorityCodeEnum": {
        "enum": [
          "BAIXA",
          "MEDIA",
          "ALTA"
        ],
        "type": "string",
        "description": "* `BAIXA` - Baixa\n* `MEDIA` - Média\n* `ALTA` - Alta"
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleGroup"
            },
            "readOnly": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "readOnly": true
          }
        },
        "required": [
          "description",
          "groups",
          "id",
          "name",
          "users"
        ]
      },
      "RoleWithGroups": {
        "type": "object",
        "description": "Serializer for the Role model, including related groups using GroupSimpleSerializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupSimple"
            },
            "readOnly": true
          }
        },
        "required": [
          "description",
          "groups",
          "id",
          "name"
        ]
      },
      "SimpleGroup": {
        "type": "object",
        "description": "SimpleGroupSerializer serializer class.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SimpleRole": {
        "type": "object",
        "description": "SimpleRoleSerializer serializer class.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SimpleUser": {
        "type": "object",
        "description": "SimpleUserSerializer serializer class.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "title": "Usuário",
            "description": "Obrigatório. 150 caracteres ou menos. Letras, números e @/./+/-/_ apenas.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          }
        },
        "required": [
          "id",
          "username"
        ]
      },
      "StatusCategoryEnum": {
        "enum": [
          "NAO_ANALISADO",
          "INDEFERIDO",
          "DEFERIDO",
          "AGUARDANDO_GESTOR",
          "EM_DESENVOLVIMENTO",
          "DESENVOLVIDO",
          "CONCLUIDO",
          "RECUSADO"
        ],
        "type": "string",
        "description": "* `NAO_ANALISADO` - Não Analisado\n* `INDEFERIDO` - Indeferido\n* `DEFERIDO` - Deferido\n* `AGUARDANDO_GESTOR` - Aguardando Gestor\n* `EM_DESENVOLVIMENTO` - Em Desenvolvimento\n* `DESENVOLVIDO` - Desenvolvido\n* `CONCLUIDO` - Concluído\n* `RECUSADO` - Recusado"
      },
      "StatusEnum": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "* `1` - Pendente\n* `2` - Concedida\n* `3` - Recusada\n* `4` - Pendente Coordenador"
      },
      "TiProperties": {
        "type": "object",
        "description": "Serializador para extrair apenas as propriedades de LimiteTerraIndigena.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "ds_cr": {
            "type": "string",
            "readOnly": true
          },
          "instrumentos_gestao": {
            "type": "string",
            "readOnly": true
          },
          "no_ti": {
            "type": "string",
            "title": "Terra Indígema",
            "maxLength": 255
          },
          "co_funai": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "title": "COD Funai"
          },
          "no_grupo_etnico": {
            "type": "string",
            "nullable": true,
            "title": "Grupo Étnico",
            "maxLength": 255
          },
          "ds_fase_ti": {
            "type": "string",
            "nullable": true,
            "title": "Fase TI",
            "maxLength": 100
          },
          "ds_modalidade": {
            "type": "string",
            "nullable": true,
            "title": "Modalidade TI",
            "maxLength": 100
          },
          "ds_reestudo_ti": {
            "type": "string",
            "nullable": true,
            "title": "Reestudo TI",
            "maxLength": 80
          },
          "no_municipio": {
            "type": "string",
            "nullable": true
          },
          "sg_uf": {
            "type": "string",
            "nullable": true,
            "maxLength": 20
          },
          "st_faixa_fronteira": {
            "type": "string",
            "nullable": true,
            "maxLength": 3
          },
          "dt_em_estudo": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ds_portaria_em_estudo": {
            "type": "string",
            "nullable": true
          },
          "dt_delimitada": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ds_despacho_delimitada": {
            "type": "string",
            "nullable": true
          },
          "dt_declarada": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ds_portaria_declarada": {
            "type": "string",
            "nullable": true
          },
          "dt_homologada": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ds_decreto_homologada": {
            "type": "string",
            "nullable": true
          },
          "dt_regularizada": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ds_matricula_regularizada": {
            "type": "string",
            "nullable": true
          },
          "ds_doc_resumo_em_estudo": {
            "type": "string",
            "nullable": true
          },
          "ds_doc_resumo_delimitada": {
            "type": "string",
            "nullable": true
          },
          "ds_doc_resumo_declarada": {
            "type": "string",
            "nullable": true
          },
          "ds_doc_resumo_homologada": {
            "type": "string",
            "nullable": true
          },
          "ds_doc_resumo_regularizada": {
            "type": "string",
            "nullable": true
          },
          "nu_area_ha": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,98}(?:\\.\\d{0,2})?$",
            "nullable": true
          },
          "dt_cadastro": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "possui_ig": {
            "type": "boolean"
          },
          "co_cr": {
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "format": "int64",
            "title": "COD Coordenção Regional"
          }
        },
        "required": [
          "co_cr",
          "co_funai",
          "ds_cr",
          "id",
          "instrumentos_gestao",
          "no_ti"
        ]
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "readOnly": true
          },
          "solicitation_type": {
            "type": "string",
            "nullable": true
          },
          "solicitation_name": {
            "type": "string",
            "readOnly": true
          },
          "complexity_code": {
            "type": "integer",
            "nullable": true
          },
          "functionality": {
            "type": "integer"
          },
          "requesting": {
            "type": "string",
            "readOnly": true
          },
          "requesting_email": {
            "type": "string",
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "title": "Descrição",
            "description": "Description of the ticket"
          },
          "opened_in_formatted": {
            "type": "string",
            "readOnly": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketAttachment"
            },
            "readOnly": true
          },
          "ticket_status": {
            "type": "string",
            "readOnly": true
          },
          "ticket_analysis_history": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "attachments",
          "code",
          "description",
          "opened_in_formatted",
          "requesting",
          "requesting_email",
          "solicitation_name",
          "subject",
          "ticket_analysis_history",
          "ticket_status"
        ]
      },
      "TicketAttachment": {
        "type": "object",
        "properties": {
          "file_path": {
            "type": "string",
            "format": "uri"
          },
          "name_file": {
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "file_path",
          "name_file"
        ]
      },
      "TicketAttachmentRequest": {
        "type": "object",
        "properties": {
          "file_path": {
            "type": "string",
            "format": "binary"
          },
          "name_file": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "file_path",
          "name_file"
        ]
      },
      "TicketRequest": {
        "type": "object",
        "properties": {
          "solicitation_type": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "complexity_code": {
            "type": "integer",
            "nullable": true
          },
          "functionality": {
            "type": "integer"
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Descrição",
            "description": "Description of the ticket"
          },
          "status_category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusCategoryEnum"
              }
            ],
            "writeOnly": true,
            "default": "NAO_ANALISADO"
          }
        },
        "required": [
          "description",
          "subject"
        ]
      },
      "TicketStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "due_on": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "user_info": {
            "type": "string",
            "readOnly": true
          },
          "formated_info": {
            "type": "string",
            "readOnly": true
          },
          "status_category": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StatusCategoryEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "priority_code": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriorityCodeEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          }
        },
        "required": [
          "formated_info",
          "id",
          "user_info"
        ]
      },
      "TicketStatusChoices": {
        "type": "object",
        "properties": {
          "status_category": {
            "type": "string",
            "readOnly": true
          },
          "priority_code": {
            "type": "string",
            "readOnly": true
          },
          "complexity": {
            "type": "string",
            "readOnly": true
          },
          "solicitation_type": {
            "type": "string",
            "readOnly": true
          },
          "functionality": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "complexity",
          "functionality",
          "priority_code",
          "solicitation_type",
          "status_category"
        ]
      },
      "Tms": {
        "type": "object",
        "description": "TmsSerializer to serialize `models.Tms`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "thumbnail_blob": {
            "type": "string",
            "description": "Get thumbnail blob from object.\n\nArgs:\n    obj (models.Tms): model instance.\n\nReturns:\n    str: Base64 encoded thumbnail blob.",
            "readOnly": true
          },
          "legend_blob": {
            "type": "string",
            "description": "Get legend blob from object.\n\nArgs:\n    obj (models.Tms): model instance.\n\nReturns:\n    str: Base64 encoded legend blob.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Ordem"
          },
          "layer_type": {
            "type": "string",
            "maxLength": 40
          },
          "active_on_init": {
            "type": "boolean",
            "description": "Show layer as active when app starts"
          },
          "is_downloadable": {
            "type": "boolean",
            "description": "Enable layer download"
          },
          "fonte": {
            "type": "string",
            "maxLength": 255
          },
          "is_public": {
            "type": "boolean"
          },
          "dt_atualizacao": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Atualização"
          },
          "database_layer_name": {
            "type": "string",
            "maxLength": 255
          },
          "bbox": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ],
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true,
            "title": "Tile Map Service Url",
            "maxLength": 500
          },
          "date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "max_native_zoom": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "is_tms": {
            "type": "boolean",
            "title": "Is a TMS Layer",
            "description": "TMS layer = True. XYZ layer = False"
          },
          "image_preview": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "legend": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "group": {
            "type": "integer"
          }
        },
        "required": [
          "created_at",
          "database_layer_name",
          "group",
          "id",
          "layer_type",
          "legend_blob",
          "name",
          "thumbnail_blob"
        ]
      },
      "TokenRefresh": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "access"
        ]
      },
      "TokenRefreshRequest": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          }
        },
        "required": [
          "refresh"
        ]
      },
      "User": {
        "type": "object",
        "description": "Class to serialize User Data adding settings as related field.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "title": "Usuário",
            "description": "Obrigatório. 150 caracteres ou menos. Letras, números e @/./+/-/_ apenas.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "title": "Primeiro nome",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "title": "Último nome",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Endereço de email",
            "maxLength": 254
          },
          "settings": {
            "type": "string",
            "description": "Get user settings.\nArgs:\n    obj (User): User instance.\n\nReturns:\n    str: User settings serialized data.",
            "readOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleRole"
            },
            "readOnly": true
          },
          "institution": {
            "type": "string",
            "description": "Institution",
            "readOnly": true
          },
          "institution_id": {
            "type": "integer",
            "readOnly": true
          },
          "is_active": {
            "type": "boolean"
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Status de superusuário",
            "description": "Indica que este usuário tem todas as permissões sem atribuí-las explicitamente."
          },
          "is_staff": {
            "type": "boolean",
            "title": "Membro da equipe",
            "description": "Indica que usuário consegue acessar este site de administração."
          },
          "is_admin": {
            "type": "boolean",
            "description": "Check if user is admin based on is_staff flag or 'Administrador' role.\n\nArgs:\n    obj (User): User instance.\n\nReturns:\n    bool: True if user is admin (is_staff=True or has 'Administrador' role).",
            "readOnly": true
          },
          "components": {
            "type": "string",
            "description": "Get user settings.\nArgs:\n    obj (User): User instance.\n\nReturns:\n    str: User settings serialized data.",
            "readOnly": true
          }
        },
        "required": [
          "components",
          "email",
          "id",
          "institution",
          "institution_id",
          "is_admin",
          "roles",
          "settings",
          "username"
        ]
      },
      "UserChangeHistory": {
        "type": "object",
        "description": "Serializer for the UserChangeHistory model.\n\nOutputs a simplified representation of user change history, including:\n- id: Change record identifier.\n- alterado_por: Username of the user who made the change.\n- action_time: Date and time when the change occurred (formatted).\n- username: New username after the change.\n- email: New email after the change.\n- institution: New institution after the change.\n- is_active: New active status after the change.\n- old_is_active: Previous active status before the change.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "alterado_por": {
            "type": "string",
            "readOnly": true
          },
          "action_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "institution": {
            "type": "string",
            "readOnly": true
          },
          "is_active": {
            "type": "boolean",
            "readOnly": true
          },
          "old_is_active": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "action_time",
          "alterado_por",
          "email",
          "id",
          "institution",
          "is_active",
          "old_is_active",
          "username"
        ]
      },
      "UserRoleChange": {
        "type": "object",
        "description": "Serializer for the UserRoleChange model.\n\nOutputs a simplified representation of user role change history, including:\n- id: Change record identifier.\n- changed_by: Username of the user who made the role change.\n- changed_at: Date and time when the role change occurred (formatted).\n- action: Action performed ('Adicionado' or 'Removido').\n- role: Name of the role affected by the change.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "changed_by": {
            "type": "string",
            "readOnly": true
          },
          "changed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "action": {
            "type": "string",
            "readOnly": true
          },
          "role": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "action",
          "changed_at",
          "changed_by",
          "id",
          "role"
        ]
      },
      "UserUploadedFile": {
        "type": "object",
        "description": "Class to serialize `models.UserUploadedFile` model data.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "date_created",
          "id",
          "name",
          "user"
        ]
      },
      "UserUploadedFileGeometryDetail": {
        "type": "object",
        "description": "Class to serialize `models.UserUploadedFileGeometry` model data.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "id"
        ]
      },
      "UserUploadedFileGeometryList": {
        "type": "object",
        "description": "Class to serialize `UserUploadedFileGeometry` geo model data.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "user_uploaded": {
                "type": "integer"
              },
              "properties": {
                "nullable": true
              }
            }
          }
        }
      },
      "UserUploadedFileGeometryListList": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureCollectionEnum"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUploadedFileGeometryList"
            }
          }
        }
      },
      "UserUploadedFileGeometryListRequest": {
        "type": "object",
        "description": "Class to serialize `UserUploadedFileGeometry` geo model data.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GisFeatureEnum"
          },
          "geometry": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "user_uploaded": {
                "type": "integer"
              },
              "properties": {
                "nullable": true
              }
            }
          }
        }
      },
      "Vector": {
        "type": "object",
        "description": "VectorSerializer to serialize `models.Vector`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Ordem"
          },
          "layer_type": {
            "type": "string",
            "maxLength": 40
          },
          "active_on_init": {
            "type": "boolean",
            "description": "Show layer as active when app starts"
          },
          "is_downloadable": {
            "type": "boolean",
            "description": "Enable layer download"
          },
          "fonte": {
            "type": "string",
            "maxLength": 255
          },
          "is_public": {
            "type": "boolean"
          },
          "dt_atualizacao": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Atualização"
          },
          "database_layer_name": {
            "type": "string",
            "maxLength": 255
          },
          "bbox": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ],
            "nullable": true
          },
          "file": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "title": "File Path"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VectorTypeEnum"
              }
            ],
            "title": "Vector Layer Type"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 25
          },
          "color_fill": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 25
          },
          "has_opacity": {
            "type": "boolean",
            "description": "Shows opacity label on app"
          },
          "default_opacity": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "nullable": true,
            "description": "Default value opacity between 0 and 100"
          },
          "image_preview": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "thumbnail_blob": {
            "type": "string",
            "format": "byte",
            "readOnly": true
          },
          "group": {
            "type": "integer"
          }
        },
        "required": [
          "database_layer_name",
          "group",
          "id",
          "layer_type",
          "name",
          "thumbnail_blob"
        ]
      },
      "VectorTypeEnum": {
        "enum": [
          "Raster",
          "Point",
          "Point-Icon",
          "Line",
          "Polygon",
          "Video",
          "streaming"
        ],
        "type": "string",
        "description": "* `Raster` - Raster\n* `Point` - Point\n* `Point-Icon` - Point-Icon\n* `Line` - Line\n* `Polygon` - Polygon\n* `Video` - Video\n* `streaming` - Streaming"
      },
      "Wms": {
        "type": "object",
        "description": "WmsSerializer to serialize `models.Wms`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "thumbnail_blob": {
            "type": "string",
            "description": "Get thumbnail blob from object.\n\nArgs:\n    obj (models.Wms): model instance.\n\nReturns:\n    str: Base64 encoded thumbnail blob.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": "Ordem"
          },
          "layer_type": {
            "type": "string",
            "maxLength": 40
          },
          "active_on_init": {
            "type": "boolean",
            "description": "Show layer as active when app starts"
          },
          "is_downloadable": {
            "type": "boolean",
            "description": "Enable layer download"
          },
          "fonte": {
            "type": "string",
            "maxLength": 255
          },
          "is_public": {
            "type": "boolean"
          },
          "dt_atualizacao": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "title": "Atualização"
          },
          "database_layer_name": {
            "type": "string",
            "maxLength": 255
          },
          "bbox": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    },
                    "example": [
                      12.9721,
                      77.5933
                    ],
                    "minItems": 2,
                    "maxItems": 3
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": [
                        12.9721,
                        77.5933
                      ],
                      "minItems": 2,
                      "maxItems": 3
                    },
                    "example": [
                      [
                        22.4707,
                        70.0577
                      ],
                      [
                        12.9721,
                        77.5933
                      ]
                    ],
                    "minItems": 2
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float"
                        },
                        "example": [
                          12.9721,
                          77.5933
                        ],
                        "minItems": 2,
                        "maxItems": 3
                      },
                      "example": [
                        [
                          22.4707,
                          70.0577
                        ],
                        [
                          12.9721,
                          77.5933
                        ]
                      ],
                      "minItems": 4
                    },
                    "example": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          50
                        ],
                        [
                          50,
                          50
                        ],
                        [
                          50,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            ],
            "nullable": true
          },
          "has_preview": {
            "type": "boolean",
            "description": "Show layer thumbnails on app"
          },
          "has_detail": {
            "type": "boolean",
            "description": "Show layer legend on app"
          },
          "detail_width": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "description": "Max width for legend on app"
          },
          "geoserver_layer_name": {
            "type": "string",
            "nullable": true,
            "description": "Geoserver layer name",
            "maxLength": 255
          },
          "geoserver_layer_namespace": {
            "type": "string",
            "nullable": true,
            "description": "Geoserver layer namespace",
            "maxLength": 40
          },
          "geoserver_layer_options": {
            "nullable": true,
            "description": "Geoserver layer extra options"
          },
          "queryable": {
            "type": "boolean",
            "title": "Is queryable",
            "description": "Shows popup attribution on app"
          },
          "has_opacity": {
            "type": "boolean",
            "description": "Shows opacity label on app"
          },
          "default_opacity": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "nullable": true,
            "description": "Default value opacity between 0 and 100"
          },
          "has_sublayers": {
            "type": "boolean",
            "description": "Shows sublayers on app"
          },
          "wms_layer_type": {
            "$ref": "#/components/schemas/WmsLayerTypeEnum"
          },
          "preview_type": {
            "nullable": true,
            "description": "Layer preview/thumbnail type\n\n* `thumbnail` - Thumbnail\n* `preview` - Preview",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PreviewTypeEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "has_metadata": {
            "type": "boolean",
            "description": "Has metadata attributes on Geoserver"
          },
          "group": {
            "type": "integer"
          },
          "geoserver": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "database_layer_name",
          "group",
          "id",
          "layer_type",
          "name",
          "thumbnail_blob"
        ]
      },
      "WmsLayerTypeEnum": {
        "enum": [
          "Raster",
          "Point",
          "Point-Icon",
          "Line",
          "Polygon",
          "Video"
        ],
        "type": "string",
        "description": "* `Raster` - Raster\n* `Point` - Point\n* `Point-Icon` - Point-Icon\n* `Line` - Line\n* `Polygon` - Polygon\n* `Video` - Video"
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      },
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "tokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Token-based authentication with required prefix \"Token\""
      }
    }
  }
}
