{
    "swagger": "2.0",
    "info": {
        "title": "Cronos API",
        "description": "Microservice for consuming data from measuring devices.",
        "termsOfService": "https://www.google.com/policies/terms/",
        "contact": {
            "email": "contact@snippets.local"
        },
        "license": {
            "name": "BSD License"
        },
        "version": "v1"
    },
    "host": "localhost:8080",
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Basic": {
            "type": "basic"
        }
    },
    "security": [
        {
            "Basic": []
        }
    ],
    "paths": {
        "/auth/obtain_token/": {
            "post": {
                "operationId": "auth_obtain_token_create",
                "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenObtainPair"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TokenObtainPair"
                        }
                    }
                },
                "tags": [
                    "auth"
                ]
            },
            "parameters": []
        },
        "/auth/refresh_token/": {
            "post": {
                "operationId": "auth_refresh_token_create",
                "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenRefresh"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/TokenRefresh"
                        }
                    }
                },
                "tags": [
                    "auth"
                ]
            },
            "parameters": []
        },
        "/orbcomm/fetch/": {
            "get": {
                "operationId": "orbcomm_fetch_list",
                "description": "Access satellite data and stores it.",
                "parameters": [
                    {
                        "name": "start_utc",
                        "in": "query",
                        "description": "Start date on UTC format.",
                        "allowEmptyValue": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been successfully completed. X instances have been created."
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "tags": [
                    "orbcomm"
                ]
            },
            "parameters": []
        },
        "/orbcomm/list/": {
            "get": {
                "operationId": "orbcomm_list_list",
                "description": "List Orbcomm formatted values.",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Filter results that starts with the given parameter.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Orbcomm"
                            }
                        }
                    }
                },
                "tags": [
                    "orbcomm"
                ]
            },
            "parameters": []
        }
    },
    "definitions": {
        "TokenObtainPair": {
            "required": [
                "username",
                "password"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "title": "Username",
                    "type": "string",
                    "minLength": 1
                },
                "password": {
                    "title": "Password",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "TokenRefresh": {
            "required": [
                "refresh"
            ],
            "type": "object",
            "properties": {
                "refresh": {
                    "title": "Refresh",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "Orbcomm": {
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "integer",
                    "readOnly": true
                },
                "value": {
                    "title": "Value",
                    "type": "string",
                    "minLength": 1
                },
                "data": {
                    "title": "Data",
                    "type": "object",
                    "x-nullable": true
                },
                "created_at": {
                    "title": "Created at",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            }
        }
    }
}