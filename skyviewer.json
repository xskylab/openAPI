
{
    "swagger": "2.0",
    "info": {
      "title": "Skyviewer API",
      "description": "Skyviewer API",
      "version": "v1"
    },
    "host": "localhost:8080",
    "schemes": [
      "http"
    ],
    "basePath": "/",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "securityDefinitions": {
      "JWT": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "security": [
      {
        "JWT": []
      }
    ],
    "paths": {
      "/agro/owner/{id}/properties": {
        "get": {
          "operationId": "agro_owner_properties_list",
          "description": "Retrieve owner properties data from Google BigQuery",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "bigquery_id": {
                    "description": "BigQuery id",
                    "type": "integer"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "type": "object"
                        },
                        "properties": {
                          "type": "object"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "Owner/Property not found"
            }
          },
          "tags": [
            "agro:BigQuery"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/agro/property/{id}": {
        "get": {
          "operationId": "agro_property_read",
          "description": "Retrieve owner properties data from Google BigQuery",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "bigquery_id": {
                    "description": "BigQuery id",
                    "type": "integer"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "type": "object"
                        },
                        "properties": {
                          "type": "object"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "Owner/Property not found"
            }
          },
          "tags": [
            "agro:BigQuery"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/agro/report/consult": {
        "post": {
          "operationId": "agro_report_consult_create",
          "description": "Generate Consult Plan Report",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "bigquery_id": {
                      "type": "integer"
                    },
                    "birthdate": {
                      "type": "string"
                    },
                    "car": {
                      "type": "string"
                    },
                    "uf": {
                      "type": "string"
                    },
                    "cpf": {
                      "type": "string"
                    },
                    "cnpj": {
                      "type": "string"
                    },
                    "geom": {
                      "type": "object"
                    },
                    "showReportMap": {
                      "type": "boolean"
                    },
                    "mother": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "bigquery": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "geometry": {
                          "type": "object"
                        },
                        "properties": {
                          "type": "object"
                        }
                      }
                    }
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "bigquery_id": {
                        "type": "integer"
                      },
                      "birthdate": {
                        "type": "string"
                      },
                      "car": {
                        "type": "string"
                      },
                      "uf": {
                        "type": "string"
                      },
                      "cpf": {
                        "type": "string"
                      },
                      "cnpj": {
                        "type": "string"
                      },
                      "geom": {
                        "type": "object"
                      },
                      "showReportMap": {
                        "type": "boolean"
                      },
                      "mother": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "bndes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "agro:Consult"
          ]
        },
        "parameters": []
      },
      "/agro/report/consult/batch": {
        "post": {
          "operationId": "agro_report_consult_batch_create",
          "description": "Post Consult Plan Report on queue",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "bigquery_id": {
                      "type": "integer"
                    },
                    "birthdate": {
                      "type": "string"
                    },
                    "car": {
                      "type": "string"
                    },
                    "uf": {
                      "type": "string"
                    },
                    "cpf": {
                      "type": "string"
                    },
                    "cnpj": {
                      "type": "string"
                    },
                    "geom": {
                      "type": "object"
                    },
                    "showReportMap": {
                      "type": "boolean"
                    },
                    "mother": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            }
          },
          "tags": [
            "agro:Consult"
          ]
        },
        "parameters": []
      },
      "/agro/report/consult/logs": {
        "get": {
          "operationId": "agro_report_consult_logs_list",
          "description": "Retrieve a single Consult Plan Report log",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "date_changed": {
                      "type": "string"
                    },
                    "date_created": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "agro:Consult"
          ]
        },
        "parameters": []
      },
      "/agro/report/consult/{id}/log": {
        "get": {
          "operationId": "agro_report_consult_log_read",
          "description": "Retrieve a single Consult Plan Report log",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ConsultLog"
              }
            }
          },
          "tags": [
            "agro:Consult"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/agro/report/inventory": {
        "post": {
          "operationId": "agro_report_inventory_create",
          "description": "Post area properties on Google BigQuery",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "geometry": {
                              "type": "object"
                            },
                            "properties": {
                              "type": "object"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "type": "object"
                        },
                        "properties": {
                          "type": "object"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "Not found"
            }
          },
          "tags": [
            "agro:BigQuery"
          ]
        },
        "parameters": []
      },
      "/agro/report/socio-environmental": {
        "post": {
          "operationId": "agro_report_socio-environmental_create",
          "description": "Post SocioEnvironmental report on queue",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "birthdate": {
                    "type": "string",
                    "example": "Invalid date"
                  },
                  "car": {
                    "type": "string",
                    "example": "SP-3533502-17074AB741B8406883FE3C8734ADC763"
                  },
                  "cnpj": {
                    "type": "string",
                    "example": "53172300000114"
                  },
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "FeatureCollection"
                      },
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  },
                  "mother": {
                    "type": "string",
                    "example": ""
                  },
                  "name": {
                    "type": "string",
                    "example": ""
                  },
                  "nirf": {
                    "type": "string",
                    "example": ""
                  },
                  "property_code": {
                    "type": "string",
                    "example": ""
                  },
                  "property_name": {
                    "type": "string",
                    "example": ""
                  },
                  "showReportMap": {
                    "type": "boolean",
                    "example": true
                  },
                  "uf": {
                    "type": "string",
                    "example": "SP"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AgroStatus"
              }
            }
          },
          "tags": [
            "agro:Socio-Environmental"
          ]
        },
        "parameters": []
      },
      "/agro/report/socio-environmental/catalog/update": {
        "post": {
          "operationId": "agro_report_socio-environmental_catalog_update_create",
          "description": "Post SocioEnvironmental image update",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "description": "Status",
                    "type": "string"
                  },
                  "request": {
                    "description": "Request id",
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "agro:Socio-Environmental"
          ]
        },
        "parameters": []
      },
      "/agro/report/socio-environmental/logs": {
        "get": {
          "operationId": "agro_report_socio-environmental_logs_list",
          "description": "Retrieve a multiple SocioEnv Report log",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AgroStatus"
                }
              }
            }
          },
          "tags": [
            "agro:Socio-Environmental"
          ]
        },
        "parameters": []
      },
      "/agro/report/socio-environmental/status/update": {
        "post": {
          "operationId": "agro_report_socio-environmental_status_update_create",
          "description": "Create a new SocioEnv Report status",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AgroStatus"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AgroStatus"
              }
            }
          },
          "tags": [
            "agro:Socio-Environmental"
          ]
        },
        "parameters": []
      },
      "/agro/report/socio-environmental/{id}/log": {
        "get": {
          "operationId": "agro_report_socio-environmental_log_read",
          "description": "Retrieve a single Consult Plan Report log",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SocioEnvironmental"
              }
            }
          },
          "tags": [
            "agro:Socio-Environmental"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/agro/contacts": {
        "get": {
            "operationId": "agro_contact_list",
            "description": "Retrieve a list of contacts",
            "summary": "List Contacts",
            "parameters": [
              {
                "name": "page",
                "in": "query",
                "description": "A page number within the paginated result set.",
                "required": false,
                "type": "integer"
              },
              {
                "name": "page_size",
                "in": "query",
                "description": "Number of results to return per page.",
                "required": false,
                "type": "integer"
              },
              {
                "name": "query",
                "in": "query",
                "description": "Search query to filter contacts by name or email.",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "A list of contacts",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Contact"
                  }
                }
              },
              "400": {
                "description": "Bad request"
              }
            },
            "tags": [
              "agro:Contact"
            ]
        },
        "post": {
          "operationId": "agro_contact_create",
          "description": "Create a new contact",
          "summary": "Create Contact",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "cpf": {
                      "type": "string",
                      "description": "Contact's CPF"
                    },
                    "name": {
                      "type": "string",
                      "description": "Contact's name"
                    },
                    "birthdate": {
                      "type": "string",
                      "format": "date",
                      "description": "Contact's birthdate"
                    },
                    "apf": {
                      "type": "string",
                      "description": "Contact's APF"
                    },
                    "car": {
                      "type": "string",
                      "description": "Contact's car"
                    },
                    "nirf": {
                      "type": "string",
                      "description": "Contact's NIRF"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Contact created successfully",
              "schema": {
                "$ref": "#/definitions/Contact"
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        }
      },
      "/agro/contacts/{id}": {
        "get": {
          "operationId": "agro_contact_read",
          "description": "Retrieve a single contact by ID",
          "summary": "Get Contact by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the contact to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Contact details",
              "schema": {
                "$ref": "#/definitions/Contact"
              }
            },
            "404": {
              "description": "Contact not found"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        },
        "delete": {
          "operationId": "agro_contact_delete",
          "description": "Delete Contact",
          "summary": "Delete Contact by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "204": {
              "description": "Contact deleted successfully"
            },
            "404": {
              "description": "Contact not found"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        },
        "patch": {
          "operationId": "agro_contact_update",
          "description": "Update Contact",
          "summary": "Update Contact by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Contact updated successfully",
              "schema": {
                "$ref": "#/definitions/Contact"
              }
            },
            "404": {
              "description": "Contact not found"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        }
      },
      "/agro/contacts/batch":{
        "post": {
          "operationId": "agro_contact_batch_create",
          "description": "Create new contacts in batch",
          "summary": "Create Contacts in Batch",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "cpf": {
                      "type": "string",
                      "description": "Contact's CPF"
                    },
                    "name": {
                      "type": "string",
                      "description": "Contact's name"
                    },
                    "birthdate": {
                      "type": "string",
                      "format": "date",
                      "description": "Contact's birthdate"
                    },
                    "apf": {
                      "type": "string",
                      "description": "Contact's APF"
                    },
                    "car": {
                      "type": "string",
                      "description": "Contact's car"
                    },
                    "nirf": {
                      "type": "string",
                      "description": "Contact's NIRF"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Contacts added to queue",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Success message"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        }
      },
      "/agro/contacts/stats": {
        "get": {
          "operationId": "agro_contact_stats",
          "description": "Get statistics about contacts",
          "summary": "Get Contact Statistics",
          "parameters": [
            {
              "name": "uf",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "county",
              "in": "query",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
              "200": {
                "description": "Contact statistics",
                "schema": {
                  "type": "object",
                  "properties": {
                    "num_properties": {
                      "type": "integer",
                      "description": "Number of properties"
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total area of properties"
                    },
                    "regions": {
                      "type": "object",
                      "properties": {
                        "norte": {
                          "type": "integer",
                          "description": "Number of contacts in the North region"
                        },
                        "nordeste": {
                          "type": "integer",
                          "description": "Number of contacts in the Northeast region"
                        },
                        "centro_oeste": {
                          "type": "integer",
                          "description": "Number of contacts in the Central-West region"
                        },
                        "sudeste": {
                          "type": "integer",
                          "description": "Number of contacts in the Southeast region"
                        },
                        "sul": {
                          "type": "integer",
                          "description": "Number of contacts in the South region"
                        }
                    }
                  },
                  "solo": {
                    "type": "object",
                    "properties": {
                      "area_reserva_legal": {
                        "type": "integer",
                        "description": "Total area of legal reserve"
                      },
                      "area_vegetacao_nativa": {
                        "type": "integer",
                        "description": "Total area of native vegetation"
                      },
                      "area_consolidada": {
                        "type": "integer",
                        "description": "Total area of consolidated land"
                      }
                    }
                  },
                  "demonstrative_car_error": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "num_contacts": {
                    "type": "integer",
                    "description": "Total number of contacts"
                  },
                  "num_processes": {
                    "type": "integer",
                    "description": "Total number of processes"
                  },
                  "trabalho_escravo": {
                    "type": "integer",
                    "description": "Number of contacts with slave labor issues"
                  }
                }
              }
            }
          },
          "tags": [
            "agro:Contact"
          ]
        }
      },
      "/agro/contacts/{id}/property-metrics": {
        "get": {
          "operationId": "agro_contact_property_metrics",
          "description": "Get property metrics for a contact",
          "summary": "Get Property Metrics by Contact ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the contact"
            }
          ],
          "responses": {
            "200": {
              "description": "Property metrics for the contact",
              "schema": {
                "type": "object",
                "properties": {
                  "contiguous_deforestation": {
                    "type": "integer",
                    "description": "Total area of contiguous deforestation"
                  },
                  "neighbor_deforestation": {
                    "type": "integer",
                    "description": "Total area of neighboring deforestation"
                  },
                  "total_deforestation": {
                    "type": "integer",
                    "description": "Total area of deforestation"
                  },
                  "deforestation_years": {
                    "type": "array"
                  },
                  "embargoed_area": {
                    "type": "integer",
                    "description": "Total area under embargo"
                  },
                  "conservation_units": {
                    "type": "object"
                  },
                  "public_forest": {
                    "type": "object"
                  },
                  "indigenous_reserves": {
                    "type": "object"
                  },
                  "human_settlements": {
                    "type": "object"
                  },
                  "quilombos": {
                    "type": "object"
                  },
                  "consolidated_area": {
                    "type": "integer",
                    "description": "Total area of consolidated land"
                  },
                  "legal_reserve_area_declared": {
                    "type": "integer",
                    "description": "Total area of legal reserve declared"
                  },
                  "legal_reserve_area_proposal": {
                    "type": "integer",
                    "description": "Total area of legal reserve proposal"
                  },
                  "native_vegetation_area": {
                    "type": "integer",
                    "description": "Total area of native vegetation"
                  },
                  "deforestation_rate": {
                    "type": "number",
                    "description": "Deforestation rate in the last 5 years"
                  },
                  "remote_sensing": {
                    "type": "object"
                  },
                  "total_area_ha": {
                    "type": "integer",
                    "description": "Total area in hectares"
                  },
                  "biomes": {
                    "type": "object"
                  }
                }
              }
            },
            "404": {
              "description": "Contact not found"
            }
          },
          "tags": [
            "agro:Contact"
          ]
        }
      },
      "/agro/properties": {
        "get": {
          "description": "Retrieve a list of properties",
          "operationId": "agro_property_list",
          "summary": "List Properties",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "contact_id",
              "in": "query",
              "description": "Filter properties by contact ID.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "uf",
              "in": "query",
              "description": "Filter properties by state (UF).",
              "required": false,
              "type": "string"
            },
            {
              "name": "county",
              "in": "query",
              "description": "Filter properties by county.",
              "required": false,
              "type": "string"
            },
            {
              "name": "car_status",
              "in": "query",
              "description": "Filter properties by CAR status.",
              "required": false,
              "type": "string"
            },
            {
              "name": "query",
              "in": "query",
              "description": "Search query to filter properties by name or NIRF.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of properties.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Property"
                }
              }
            },
            "404": {
              "description": "No properties found."
            }
          },
          "tags": [
            "agro:Property"
          ]
        },
        "post": {
          "operationId": "agro_property_create",
          "description": "Create Property",
          "summary": "Create Property",
          "parameters": [
            {
              "name": "contact_id",
              "in": "body",
              "required": true,
              "schema": {
                "type": "integer",
                "description": "ID of the contact associated with the property"
              }
            },
            {
              "name": "geom",
              "in": "body",
              "required": false,
              "schema": {
                "type": "object",
                "description": "Feature Collection geometry to search for properties"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Property created successfully",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Property"
                }
              }
            },
            "204": {
              "description": "No content"
            },
            "400": {
              "description": "Bad request"
            },
            "404": {
              "description": "Contact not found"
            }
          },
          "tags": [
            "agro:Property"
          ]
        }
      },
      "/agro/properties/{id}": {
        "get": {
          "operationId": "agro_property_read_id",
          "description": "Retrieve a single property by ID",
          "summary": "Get Property by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the property to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Property details",
              "schema": {
                "$ref": "#/definitions/Property"
              }
            },
            "404": {
              "description": "Property not found"
            }
          },
          "tags": [
            "agro:Property"
          ]
        },
        "delete": {
          "operationId": "agro_property_delete",
          "description": "Delete Property",
          "summary": "Delete Property by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "204": {
              "description": "Property deleted successfully"
            },
            "404": {
              "description": "Property not found"
            }
          },
          "tags": [
            "agro:Property"
          ]
        }
      },
      "/agro/properties/{id}/resolved-embargo": {
          "get": {
            "operationId": "agro_property_id_resolved_embargo",
            "description": "Get resolved embargo data on Google BigQuery.",
            "summary": "Get resolved embargo data",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "integer",
                "description": "ID of the property to retrieve resolved embargo"
              }
            ],
            "responses": {
              "200": {
                "description": "Property resolved embargo data",
                "schema": {
                  "type": "object",
                  "description": "Feature Collection geometry with resolved embargo",
                  "properties": {
                    "type": { "type": "string" },
                    "features": {
                      "type": "array",
                      "items": { "type": "object" }
                    }
                  }
                }
              },
              "404": {
                "description": "Property not found"
              }
            },
    "tags": [
      "agro:Property"
    ]
  }
},
      "/agro/properties/states-cities": {
        "get": {
          "operationId": "agro_property_states_cities",
          "description": "Retrieve states and cities for properties",
          "summary": "Get States and Cities for Properties",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of states and cities",
              "schema": {
                "type": "object",
                "properties": {
                  "ufs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "cities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "agro:Property"
          ]
        }
      },
      "/agro/properties/{id}/favorite": {
        "post": {
          "operationId": "agro_property_favorite",
          "description": "Toggle Property Favorite",
          "summary": "Toggle Property Favorite Status",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the property to toggle favorite status"
            }
          ],
          "responses": {
            "200": {
              "description": "Property",
              "schema": {
                "$ref": "#/definitions/Property"
              }
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "agro:Property"
          ]
        }
      },
      "/agro/properties/{id}/intersection": {
        "get": {
          "operationId": "agro_property_intersection",
          "description": "Get All Property Intersections of a given property",
          "summary": "Get Property Intersections",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the property to retrieve intersections for"
            }
          ],
          "responses": {
            "200": {
              "description": "Feature Collection with all intersections",
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "FeatureCollection"
                    ]
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Feature"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Property not found"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "agro:Property"
          ]
        }   
      },
      "/agro/gleba": {
        "get": {
          "operationId": "agro_gleba_list",
          "description": "Retrieve a list of glebas",
          "summary": "List Glebas",
          "parameters": [
            {
              "name": "property_id",
              "in": "query", 
              "description": "Filter glebas by property ID.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of glebas.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Gleba"
                }
              }
            },
            "404": {
              "description": "No glebas found."
            }
          },
          "tags": [
            "agro:Gleba"
          ]
        },
        "post": {
          "operationId": "agro_gleba_create",
          "description": "Create Gleba",
          "summary": "Create Gleba",
          "parameters": [
              {
                "name": "data",
                "in": "body",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "property_id": {
                      "type": "integer",
                      "description": "ID of the property associated with the gleba"
                    },
                    "geometry": {
                      "type": "object",
                      "description": "Feature Collection geometry to search for glebas"
                    }
                  }
                }
              }
          ],
          "responses": {
            "201": {
              "description": "Gleba created successfully",
              "schema": {
                "$ref": "#/definitions/Gleba"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "500": {
              "description": "Internal Server Error - Unexpected issue occurred."
            }
          },
          "tags": [
            "agro:Gleba"
          ]
        }
      },
      "/agro/gleba/{id}": {
        "get": {
          "operationId": "agro_gleba_read_id",
          "description": "Retrieve a single gleba by ID",
          "summary": "Get Gleba by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the gleba to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Gleba details",
              "schema": {
                "$ref": "#/definitions/Gleba"
              }
            },
            "404": {
              "description": "Gleba not found"
            }
          },
          "tags": [
            "agro:Gleba"
          ]
        },
        "delete": {
          "operationId": "agro_gleba_delete",
          "description": "Delete Gleba",
          "summary": "Delete Gleba by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "204": {
              "description": "Gleba deleted successfully"
            },
            "404": {
              "description": "Gleba not found"
            }
          },
          "tags": [
            "agro:Gleba"
          ]
        },
        "patch": {
          "operationId": "agro_gleba_update",
          "description": "Update Gleba",
          "summary": "Update Gleba by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer"
            },
            {
              "name": "data",
              "in": "body",
              "required": true,
              "type": "object",
              "properties": {
                "geometry": {
                  "type": "object",
                  "description": "Feature Collection geometry to update the gleba"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Gleba updated successfully",
              "schema": {
                "$ref": "#/definitions/Gleba"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "404": {
              "description": "Gleba not found"
            }
          },
          "tags": [
            "agro:Gleba"
          ]
        }
      },
      "/agro/upload": {
        "get": {
          "operationId": "agro_upload_list",
          "description": "Retrieve a list of uploads files",
          "summary": "List Files",
          "parameters": [
            {
              "name": "contact",
              "in": "query",
              "description": "Filter uploads by contact ID.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of upload files.",
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No files found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "agro:Upload"
          ]
        },
        "delete": {
          "operationId": "agro_upload_delete",
          "description": "Delete one or more uploaded files for a contact from Google Cloud Storage (GCS).",
          "summary": "Delete Upload(s) by contact and file ID(s)",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "contact": {
                    "type": "integer",
                    "description": "Contact ID associated with the uploaded files."
                  },
                  "file_id": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file IDs to delete."
                  }
                },
                "required": ["contact", "file_id"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Result of the delete operation.",
              "schema": {
                "type": "object",
                "properties": {
                  "deleted": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of successfully deleted files."
                  },
                  "not_found": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of files not found."
                  },
                  "forbidden": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of files that cannot be deleted."
                  }
                }
              }
            },
            "204": {
              "description": "Upload deleted successfully (no content returned)."
            },
            "400": {
              "description": "Missing required parameters or invalid data."
            },
            "404": {
              "description": "Upload not found."
            }
          },
          "tags": [
            "agro:Upload"
          ]
        },
        "post": {
          "operationId": "agro_upload_create",
          "description": "Upload one or more files for a contact to Google Cloud Storage (GCS).",
          "summary": "Upload file(s) for a contact",
          "parameters": [
            {
              "name": "contact",
              "in": "formData",
              "required": true,
              "type": "integer",
              "description": "Contact ID associated with the uploaded files."
            },
            {
              "name": "file",
              "in": "formData",
              "required": true,
              "type": "file",
              "description": "File(s) to upload. Multiple files can be uploaded."
            }
          ],
          "consumes": [
            "multipart/form-data"
          ],
          "responses": {
            "201": {
              "description": "Files uploaded successfully.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "ID or name of the uploaded file."
                    },
                    "url": {
                      "type": "string",
                      "description": "URL of the uploaded file in GCS."
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Missing required parameters or invalid data."
            },
            "404": {
              "description": "Contact not found."
            }
          },
          "tags": [
            "agro:Upload"
          ]
        }
      },
      "/auth/change-password": {
        "post": {
          "operationId": "auth_change-password_create",
          "description": "Change User password",
          "summary": "Change User Password",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "required": [
                  "oldPassword",
                  "newPassword1"
                ],
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "description": "Old password",
                    "type": "string"
                  },
                  "newPassword1": {
                    "description": "New password",
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "refresh": {
                    "description": "Refresh token",
                    "type": "string"
                  },
                  "access": {
                    "description": "Access token",
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "description": "Error message",
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "auth:password"
          ]
        },
        "parameters": []
      },
      "/auth/obtain_token": {
        "post": {
          "operationId": "auth_obtain_token_create",
          "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object",
                "properties" : {
                  "access": {
                    "description": "Access token",
                    "type": "string"
                  },
                  "refresh": {
                    "description": "Refresh",
                    "type": "string"
                  }
                }
  
                
              }
            }
          },
          "tags": [
            "auth:token"
          ]
        },
        "parameters": []
      },
      "/auth/refresh_token": {
        "post": {
          "operationId": "auth_refresh_token_create",
          "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "access": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "auth:token"
          ]
        },
        "parameters": []
      },
      "/auth/modify-password": {
        "post": {
          "operationId": "auth_modify_password",
          "description": "Change the authenticated user's password.",
          "summary": "Change User Password (Authenticated)",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "old_password",
                  "new_password",
                  "confirm_new_password"
                ],
                "properties": {
                  "old_password": {
                    "type": "string",
                    "description": "Current password of the user"
                  },
                  "new_password": {
                    "type": "string",
                    "description": "New password"
                  },
                  "confirm_new_password": {
                    "type": "string",
                    "description": "Confirmation of the new password"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Password changed successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Password changed successfully"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (missing fields, passwords do not match, or new password is same as old)",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            },
            "403": {
              "description": "Old password is incorrect",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Old password is incorrect"
                  }
                }
              }
            }
          },
          "tags": [
            "auth:password"
          ]
        }
      },
      "/imagery/image": {
        "post": {
          "operationId": "imagery_image_create",
          "description": "Process TMS of a list of images.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "title": "Image Processing Request Object",
                  "description": "Example of a request object to process images. The structures can vary.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "sat": {
                      "type": "integer"
                    },
                    "contrast": {
                      "type": "boolean"
                    },
                    "contrast_range": {
                      "description": "An array of two numbers indicating the contrast range.",
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "username": {
                      "type": "string"
                    },
                    "date_changed": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "string"
                    },
                    "image": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "imagery:image"
          ]
        },
        "parameters": []
      },
      "/imagery/image/status/logs": {
        "get": {
          "operationId": "imagery_image_status_logs_list",
          "description": "Retrieve a multiple image processing request log",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Status"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "imagery:status"
          ]
        },
        "parameters": []
      },
      "/imagery/image/status/update": {
        "post": {
          "operationId": "imagery_image_status_update_create",
          "description": "Create a new process status",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "parameters": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Status created"
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "imagery:status"
          ]
        },
        "parameters": []
      },
      "/imagery/image/status/{id}/log": {
        "get": {
          "operationId": "imagery_image_status_log_read",
          "description": "Retrieve a single image processing request log",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserRequest"
              }
            }
          },
          "tags": [
            "imagery:status"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Request Log.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/imagery/image/{name}": {
        "get": {
          "operationId": "imagery_image_read",
          "description": "Retrieve Gaia's selected image detail.",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "description": "Image name.",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Image detail"
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "imagery:image"
          ]
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/imagery/images": {
        "get": {
          "operationId": "imagery_images_list",
          "description": "Retrieve Gaia's list of permitted images.",
          "parameters": [
            {
              "name": "start_date",
              "in": "query",
              "description": "Filter images by start date.",
              "type": "date"
            },
            {
              "name": "end_date",
              "in": "query",
              "description": "Filter images by end date.",
              "type": "date"
            },
            {
              "name": "max_cloud",
              "in": "query",
              "description": "Maximum cloud cover percentage.",
              "type": "number",
              "format": "float"
            },
            {
              "name": "in_bbox",
              "in": "query",
              "description": "Bounding box for image retrieval.",
              "type": "string"
            },
            {
              "name": "satellite_id",
              "in": "query",
              "description": "Comma-separated list of satellite IDs.",
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page number for pagination.",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string"
                  },
                  "previous": {
                    "type": "string"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "type": "object"
                        },
                        "properties": {
                          "type": "object"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "imagery:image"
          ]
        },
        "parameters": []
      },
      "/imagery/satellites": {
        "get": {
          "operationId": "imagery_satellites_list",
          "description": "Retrieve Gaia's list of permitted satellites.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "description": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "agency": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "imagery:satellites"
          ]
        },
        "parameters": []
      },
      "/layer/basemap": {
        "get": {
          "operationId": "layer_basemap_list",
          "description": "Basemap view creates list and data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Basemap"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "post": {
          "operationId": "layer_basemap_create",
          "description": "Basemap view creates list and data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "parameters": []
      },
      "/layer/basemap/{id}": {
        "get": {
          "operationId": "layer_basemap_read",
          "description": "Class for delete and update Basemap data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "put": {
          "operationId": "layer_basemap_update",
          "description": "Class for delete and update Basemap data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "patch": {
          "operationId": "layer_basemap_partial_update",
          "description": "Class for delete and update Basemap data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Basemap"
              }
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "delete": {
          "operationId": "layer_basemap_delete",
          "description": "Class for delete and update Basemap data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:basemap"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this basemap.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/bookmark": {
        "get": {
          "operationId": "layer_bookmark_list",
          "description": "Bookmark list view data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Bookmark"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "post": {
          "operationId": "layer_bookmark_create",
          "description": "Bookmark list view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "parameters": []
      },
      "/layer/bookmark/{id}": {
        "get": {
          "operationId": "layer_bookmark_read",
          "description": "Bookmark delete view.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "put": {
          "operationId": "layer_bookmark_update",
          "description": "Bookmark delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "patch": {
          "operationId": "layer_bookmark_partial_update",
          "description": "Bookmark delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Bookmark"
              }
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "delete": {
          "operationId": "layer_bookmark_delete",
          "description": "Bookmark delete view.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:bookmark"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/filter": {
        "get": {
          "operationId": "layer_filter_list",
          "description": "Layer Filter  preview and creation data view.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Filter"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "post": {
          "operationId": "layer_filter_create",
          "description": "Layer Filter  preview and creation data view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "parameters": []
      },
      "/layer/geoserver": {
        "get": {
          "operationId": "layer_geoserver_list",
          "description": "View list and create for Geoserver.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Geoserver"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "post": {
          "operationId": "layer_geoserver_create",
          "description": "View list and create for Geoserver.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "parameters": []
      },
      "/layer/geoserver/{id}": {
        "get": {
          "operationId": "layer_geoserver_read",
          "description": "View update and delete by ID in Geoserver.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "put": {
          "operationId": "layer_geoserver_update",
          "description": "View update and delete by ID in Geoserver.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "patch": {
          "operationId": "layer_geoserver_partial_update",
          "description": "View update and delete by ID in Geoserver.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Geoserver"
              }
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "delete": {
          "operationId": "layer_geoserver_delete",
          "description": "View update and delete by ID in Geoserver.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:geoserver"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Geoserver.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/group/{id}": {
        "get": {
          "operationId": "layer_group_read",
          "description": "Layer view list data by group.",
          "parameters": [
            {
              "name": "id",
              "in": "query",
              "description": "",
              "required": false,
              "type": "number"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Layer"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/groups": {
        "get": {
          "operationId": "layer_groups_list",
          "description": "Layer Group view creates list and data.",
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "order",
              "in": "query",
              "description": "",
              "required": false,
              "type": "number"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/LayerGroup"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "post": {
          "operationId": "layer_groups_create",
          "description": "Layer Group view creates list and data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "parameters": []
      },
      "/layer/tms": {
        "get": {
          "operationId": "layer_tms_list",
          "description": "View for listing and creating Tms instances.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tms"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "post": {
          "operationId": "layer_tms_create",
          "description": "View for listing and creating Tms instances.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "parameters": []
      },
      "/layer/vector": {
        "get": {
          "operationId": "layer_vector_list",
          "description": "Vector list and create view data.",
          "parameters": [
            {
              "name": "type",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Vector"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "post": {
          "operationId": "layer_vector_create",
          "description": "Vector list and create view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "parameters": []
      },
      "/layer/vector/geometries": {
        "get": {
          "operationId": "layer_vector_geometries_list",
          "description": "Vector list and create view data.",
          "parameters": [
            {
              "name": "vector_uploaded",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorGeometry"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "post": {
          "operationId": "layer_vector_geometries_create",
          "description": "Vector list and create view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "parameters": []
      },
      "/layer/vector/{id}": {
        "get": {
          "operationId": "layer_vector_read",
          "description": "View to retrieve `models.UserUploadedFileGeometry` model data.",
          "parameters": [
            {
              "name": "vector_uploaded",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorGeometryList"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/vector/{id}/detail": {
        "get": {
          "operationId": "layer_vector_detail_read",
          "description": "View to retrieve `models.VectorGeometry` model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VectorDetail"
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this vector geometry.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/wms": {
        "get": {
          "operationId": "layer_wms_list",
          "description": "View for listing and creating Wms instances.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Wms"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "post": {
          "operationId": "layer_wms_create",
          "description": "View for listing and creating Wms instances.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "parameters": []
      },
      "/layer/{id}": {
        "get": {
          "operationId": "layer_read",
          "description": "Layer Retrieve View.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Layer"
              }
            }
          },
          "tags": [
            "layer:layers"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this layer.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/{id}/filter": {
        "get": {
          "operationId": "layer_filter_read",
          "description": "Layer Filter  delete and update data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "put": {
          "operationId": "layer_filter_update",
          "description": "Layer Filter  delete and update data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "patch": {
          "operationId": "layer_filter_partial_update",
          "description": "Layer Filter  delete and update data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Filter"
              }
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "delete": {
          "operationId": "layer_filter_delete",
          "description": "Layer Filter  delete and update data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:filter"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this filter.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/{id}/groups": {
        "get": {
          "operationId": "layer_groups_read",
          "description": "Class for delete and update Group data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "put": {
          "operationId": "layer_groups_update",
          "description": "Class for delete and update Group data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "patch": {
          "operationId": "layer_groups_partial_update",
          "description": "Class for delete and update Group data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerGroup"
              }
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "delete": {
          "operationId": "layer_groups_delete",
          "description": "Class for delete and update Group data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:group"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this group.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/{id}/image": {
        "get": {
          "operationId": "layer_image_list",
          "description": "Fetches the layer by identifier and returns the thumbnail image.",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "layer:image"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/{id}/image/base64": {
        "get": {
          "operationId": "layer_image_base64_list",
          "description": "Fetches the layer by identifier and returns the thumbnail image.",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "layer:image"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/{id}/legend": {
        "get": {
          "operationId": "layer_legend_list",
          "description": "Fetches the layer by identifier and returns the legend image.",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "layer:legend"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/{id}/legend/base64": {
        "get": {
          "operationId": "layer_legend_base64_list",
          "description": "Fetches the layer by identifier and returns the thumbnail image.",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "layer:legend"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/layer/{id}/tms": {
        "get": {
          "operationId": "layer_tms_read",
          "description": "View for updating and deleting Tms instance.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "put": {
          "operationId": "layer_tms_update",
          "description": "View for updating and deleting Tms instance.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "patch": {
          "operationId": "layer_tms_partial_update",
          "description": "View for updating and deleting Tms instance.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Tms"
              }
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "delete": {
          "operationId": "layer_tms_delete",
          "description": "View for updating and deleting Tms instance.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:tms"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this TMS.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/{id}/vector": {
        "get": {
          "operationId": "layer_vector_read_unique",
          "description": "Vector retrieve, update and delete view.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "put": {
          "operationId": "layer_vector_update",
          "description": "Vector retrieve, update and delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "patch": {
          "operationId": "layer_vector_partial_update",
          "description": "Vector retrieve, update and delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vector"
              }
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "delete": {
          "operationId": "layer_vector_delete",
          "description": "Vector retrieve, update and delete view.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:vector"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Vector.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/layer/{id}/vector/geometries": {
        "get": {
          "operationId": "layer_vector_geometries_read",
          "description": "Vector Geometry retrieve, update and delete view.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "put": {
          "operationId": "layer_vector_geometries_update",
          "description": "Vector Geometry retrieve, update and delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "patch": {
          "operationId": "layer_vector_geometries_partial_update",
          "description": "Vector Geometry retrieve, update and delete view.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VectorGeometry"
              }
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "delete": {
          "operationId": "layer_vector_geometries_delete",
          "description": "Vector Geometry retrieve, update and delete view.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:vector-geometries"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this vector geometry.",
            "required": true,
            "type": "integer"
          }
        ]
      },
       "/layer/{id}/wms": {
        "get": {
          "operationId": "layer_wms_read",
          "description": "View for updating and deleting Wms instance.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "put": {
          "operationId": "layer_wms_update",
          "description": "View for updating and deleting Wms instance.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "patch": {
          "operationId": "layer_wms_partial_update",
          "description": "View for updating and deleting Wms instance.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Wms"
              }
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "delete": {
          "operationId": "layer_wms_delete",
          "description": "View for updating and deleting Wms instance.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "layer:wms"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this WMS.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/management/time": {
        "post": {
          "operationId": "management_time_create",
          "description": "Post User system usage.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "required": [
                  "time"
                ],
                "type": "object",
                "properties": {
                  "time": {
                    "description": "Time in seconds",
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            }
          },
          "tags": [
            "management:time"
          ]
        },
        "parameters": []
      },
      "/management/usages": {
        "get": {
          "operationId": "management_usages_list",
          "description": "API for listing usage data.",
          "parameters": [
            {
              "name": "user_id",
              "in": "query",
              "description": "Multiple values may be separated by commas.",
              "required": false,
              "type": "number"
            },
            {
              "name": "start_date",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "sector_id",
              "in": "query",
              "description": "Multiple values may be separated by commas.",
              "required": false,
              "type": "number"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Usage"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "management:usages"
          ]
        },
        "parameters": []
      },
      "/permission/eagle-eye/auth": {
        "get": {
          "operationId": "permission_eagle-eye_auth_list",
          "description": "Generate EagleEye auth token",
          "parameters": [
            {
              "name": "code",
              "in": "query",
              "description": "Authorization code from EagleEye",
              "type": "string"
            }
          ],
          "responses": {
            "201": {
              "description": "Token Created"
            },
            "500": {
              "description": "Failed to create token. See error detail."
            }
          },
          "tags": [
            "permission:eagle-eye"
          ]
        },
        "parameters": []
      },
      "/permission/eagle-eye/refresh": {
        "get": {
          "operationId": "permission_eagle-eye_refresh_list",
          "description": "Refresh EagleEye auth token",
          "parameters": [],
          "responses": {
            "201": {
              "description": "Token Created"
            },
            "500": {
              "description": "Failed to create token. See error detail."
            }
          },
          "tags": [
            "permission:eagle-eye"
          ]
        },
        "parameters": []
      },
      "/permission/eagle-eye/token": {
        "get": {
          "operationId": "permission_eagle-eye_token_list",
          "description": "Retrieve the last EagleEye token",
          "parameters": [],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/EagleEyeToken"
              }
            }
          },
          "tags": [
            "permission:eagle-eye"
          ]
        },
        "parameters": []
      },
      "/permission/layer": {
        "get": {
          "operationId": "permission_layer_list",
          "description": "LayerPermission list and create view data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/LayerPermission"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "post": {
          "operationId": "permission_layer_create",
          "description": "LayerPermission list and create view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "parameters": []
      },
      "/permission/layer/{id}": {
        "get": {
          "operationId": "permission_layer_read",
          "description": "LayerPermission retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "put": {
          "operationId": "permission_layer_update",
          "description": "LayerPermission retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "patch": {
          "operationId": "permission_layer_partial_update",
          "description": "LayerPermission retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/LayerPermission"
              }
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "delete": {
          "operationId": "permission_layer_delete",
          "description": "LayerPermission retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "permission:layers"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this layer permission.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/algorithm": {
        "get": {
          "operationId": "smart_cities_algorithm_list",
          "description": "API endpoint to retrieve and create Algorithm model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Algorithm"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "post": {
          "operationId": "smart_cities_algorithm_create",
          "description": "API endpoint to retrieve and create Algorithm model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "parameters": []
      },
      "/smart_cities/algorithm/group": {
        "get": {
          "operationId": "smart_cities_algorithm_group_list",
          "description": "API endpoint to retrieve and create AlgorithmGroup model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AlgorithmAndGroup"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "post": {
          "operationId": "smart_cities_algorithm_group_create",
          "description": "API endpoint to retrieve and create AlgorithmGroup model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AlgorithmAndGroup"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AlgorithmAndGroup"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "parameters": []
      },
      "/smart_cities/algorithm/group/{id}": {
        "get": {
          "operationId": "smart_cities_algorithm_group_read",
          "description": "API endpoint to retrieve and update AlgorithmGroup model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AlgorithmGroup"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "put": {
          "operationId": "smart_cities_algorithm_group_update",
          "description": "API endpoint to retrieve and update AlgorithmGroup model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AlgorithmGroup"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AlgorithmGroup"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "patch": {
          "operationId": "smart_cities_algorithm_group_partial_update",
          "description": "API endpoint to retrieve and update AlgorithmGroup model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AlgorithmGroup"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/AlgorithmGroup"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "delete": {
          "operationId": "smart_cities_algorithm_group_delete",
          "description": "API endpoint to retrieve and update AlgorithmGroup model data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:algorithm-group"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this algorithm group.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/algorithm/{id}": {
        "get": {
          "operationId": "smart_cities_algorithm_read",
          "description": "API endpoint to retrieve and update Algorithm model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "put": {
          "operationId": "smart_cities_algorithm_update",
          "description": "API endpoint to retrieve and update Algorithm model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "patch": {
          "operationId": "smart_cities_algorithm_partial_update",
          "description": "API endpoint to retrieve and update Algorithm model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Algorithm"
              }
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "delete": {
          "operationId": "smart_cities_algorithm_delete",
          "description": "API endpoint to retrieve and update Algorithm model data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:algorithm"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this algorithm.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/analytics": {
        "get": {
          "operationId": "smart_cities_analytics_list",
          "description": "API endpoint to retrieve and create Analytic model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Analytic"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "post": {
          "operationId": "smart_cities_analytics_create",
          "description": "API endpoint to retrieve and create Analytic model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "parameters": []
      },
      "/smart_cities/analytics/{id}": {
        "get": {
          "operationId": "smart_cities_analytics_read",
          "description": "API endpoint to retrieve, update and delete Analytic model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "put": {
          "operationId": "smart_cities_analytics_update",
          "description": "API endpoint to retrieve, update and delete Analytic model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "patch": {
          "operationId": "smart_cities_analytics_partial_update",
          "description": "API endpoint to retrieve, update and delete Analytic model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Analytic"
              }
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "delete": {
          "operationId": "smart_cities_analytics_delete",
          "description": "API endpoint to retrieve, update and delete Analytic model data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:analytics"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this analytic.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/babelstreet/ip/requests": {
        "get": {
          "operationId": "smart_cities_babelstreet_ip_requests_list",
          "description": "List Babel Street location requests.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/BabelStreetLocationStatus"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/ip/search": {
        "post": {
          "operationId": "smart_cities_babelstreet_ip_search_create",
          "description": "Search Babel Street location by IP address",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "ip_address": {
                    "description": "IP address",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "Start date",
                    "type": "string",
                    "format": "date"
                  },
                  "end_date": {
                    "description": "End date",
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/log/{id}": {
        "get": {
          "operationId": "smart_cities_babelstreet_log_read",
          "description": "Get Babel Street location result",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "results": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "devices": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "HOT": {
                                    "type": "string"
                                  },
                                  "FLAGS": {
                                    "type": "string"
                                  },
                                  "LATITUDE": {
                                    "type": "string"
                                  },
                                  "LONGITUDE": {
                                    "type": "string"
                                  },
                                  "TIMESTAMP": {
                                    "type": "string"
                                  },
                                  "IP_ADDRESS": {
                                    "type": "string"
                                  },
                                  "RECORD_COUNT": {
                                    "type": "integer"
                                  },
                                  "REGISTRATION_ID": {
                                    "type": "string"
                                  },
                                  "SEARCH_OBJECT_ID": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "geom": {
                        "type": "object"
                      },
                      "start_date": {
                        "type": "string"
                      },
                      "end_date": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/smart_cities/babelstreet/registration-id/requests": {
        "get": {
          "operationId": "smart_cities_babelstreet_registration-id_requests_list",
          "description": "List Babel Street location requests.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/BabelStreetLocationStatus"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/registration-id/search": {
        "post": {
          "operationId": "smart_cities_babelstreet_registration-id_search_create",
          "description": "Search Babel Street location by registration id",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "geom": {
                    "description": "GeoJSON geometry as a stringified JSON",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "Start date and time for the search",
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_date": {
                    "description": "End date and time for the search",
                    "type": "string",
                    "format": "date-time"
                  },
                  "registration_id": {
                    "description": "Registration ID for the search",
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/requests": {
        "get": {
          "operationId": "smart_cities_babelstreet_requests_list",
          "description": "List Babel Street location requests.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/BabelStreetLocationStatus"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/search": {
        "post": {
          "operationId": "smart_cities_babelstreet_search_create",
          "description": "Search Babel Street location",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "geom": {
                    "description": "GeoJSON geometry as a stringified JSON",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "Start date and time for the search",
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_date": {
                    "description": "End date and time for the search",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request added to queue"
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        },
        "parameters": []
      },
      "/smart_cities/clearview/search": {
        "post": {
          "operationId": "smart_cities_clearview_search_create",
          "description": "Search Clearview image",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "required": [
                  "photo"
                ],
                "type": "object",
                "properties": {
                  "photo": {
                    "description": "Image file to be uploaded for ClearView search",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "blob_id": {
                      "type": "string"
                    },
                    "face_id": {
                      "type": "string"
                    },
                    "fqa_score": {
                      "type": "number"
                    },
                    "rec": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "size": {
                      "type": "integer"
                    },
                    "ts": {
                      "type": "integer"
                    },
                    "url": {
                      "type": "string"
                    },
                    "results": {
                      "type": "object",
                      "properties": {
                        "api_version": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "search_query": {
                              "type": "object"
                            },
                            "search_metadata": {
                              "type": "object"
                            },
                            "remote_search_error": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "search_results": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:clearview"
          ]
        },
        "parameters": []
      },
      "/smart_cities/babelstreet/identity/search": {
        "post": {
          "operationId": "smart_cities_identity_search",
          "summary": "Search Babel Street Identity",
          "description": "Search identity information using Babel Street API.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "First name of the person"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the person"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of birth (YYYY-MM-DD)"
                  },
                  "document_number": {
                    "type": "string",
                    "description": "Document number (optional)"
                  }
                },
                "required": ["first_name", "last_name"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Identity search result",
              "schema": {
                "type": "object",
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "full_name": { "type": "string" },
                        "date_of_birth": { "type": "string" },
                        "document_number": { "type": "string" },
                        "match_score": { "type": "number" }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        }
      },
      "/smart_cities/babelstreet/identity/log": {
        "get": {
          "operationId": "smart_cities_identity_log_list",
          "description": "List Babel Street identity logs",
          "summary": "List Babel Street identity logs",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of identity logs",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        }
      },
      "/babelstreet/identity/log/{id}": {
        "get": {
          "operationId": "babelstreet_identity_log_read",
          "description": "Retrieve a specific Babel Street identity log by ID",
          "summary": "Retrieve Babel Street identity log by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Unique identifier for the identity log"
            }
          ],
          "responses": {
            "200": {
              "description": "Identity log details",
              "schema": {
                "type": "object"
              }
            },
            "404": {
              "description": "Identity log not found"
            }
          },
          "tags": [
            "smart_cities:babelstreet"
          ]
        }
      },
      "/smart_cities/drone": {
        "post": {
          "operationId": "smart_cities_drone_create",
          "description": "Drone view to set paths.",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "parameters": []
      },
      "/smart_cities/drone/list": {
        "get": {
          "operationId": "smart_cities_drone_list_list",
          "description": "List all `models.DronePath` model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DronePathList"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "parameters": []
      },
      "/smart_cities/drone/{id}": {
        "get": {
          "operationId": "smart_cities_drone_read",
          "description": "Retrieve `models.DronePath` model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DronePath"
              }
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "put": {
          "operationId": "smart_cities_drone_update",
          "description": "Retrieve `models.DronePath` model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DronePath"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DronePath"
              }
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "patch": {
          "operationId": "smart_cities_drone_partial_update",
          "description": "Retrieve `models.DronePath` model data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DronePath"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DronePath"
              }
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "delete": {
          "operationId": "smart_cities_drone_delete",
          "description": "Retrieve `models.DronePath` model data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:drone"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Drone Path.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/ezbiz/form/dengue": {
        "post": {
          "operationId": "smart_cities_ezbiz_form_dengue_create",
          "description": "Create Dengue Registration Vector Geometry",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "FILE_ft_itens": {
                    "description": "List of items containing longitude, latitude, and path.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "longitude": {
                          "description": "Longitude of the location.",
                          "type": "number",
                          "format": "float"
                        },
                        "latitude": {
                          "description": "Latitude of the location.",
                          "type": "number",
                          "format": "float"
                        },
                        "path": {
                          "description": "Base64 path of the item.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "c_tipo_local": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Type of the location.",
                        "type": "string"
                      }
                    }
                  },
                  "Nome_estabelec": {
                    "description": "Name of the establishment.",
                    "type": "string"
                  },
                  "c_DATAHORA": {
                    "description": "Date and time of the visit.",
                    "type": "date-time"
                  },
                  "C_Resultado": {
                    "type": "object",
                    "properties": {
                      "defaultValue": {
                        "description": "Default contamination status.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Result status of the vector.",
                        "type": "string"
                      }
                    }
                  },
                  "c_depositos": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Deposits associated with the location.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "C_OBS": {
                    "description": "Observations regarding the visit.",
                    "type": "string"
                  },
                  "DATETIME_PROX_VIST": {
                    "description": "Date of the next visit.",
                    "type": "date-time"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Created"
            }
          },
          "tags": [
            "smart_cities:dengue"
          ]
        },
        "parameters": []
      },
      "/smart_cities/findface/events": {
        "post": {
          "operationId": "smart_cities_findface_events_create",
          "description": "Search interest area events",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "type_event": {
                    "description": "JSON stringified array of selected event types",
                    "type": "string"
                  },
                  "geojson": {
                    "description": "JSON stringified GeoJSON object representing the selected area",
                    "type": "string"
                  },
                  "date_start": {
                    "description": "Start date and time in ISO format",
                    "type": "string",
                    "example": "2025-03-02T12:00:00"
                  },
                  "date_end": {
                    "description": "End date and time in ISO format",
                    "type": "string",
                    "example": "2025-03-02T15:00:00"
                  },
                  "faces_filter": {
                    "description": "JSON stringified object containing face filters",
                    "type": "string",
                    "example": {
                      "mask": "yes",
                      "beard": "no",
                      "glasses": "yes",
                      "gender": "male"
                    }
                  },
                  "bodies_filter": {
                    "description": "JSON stringified object containing body filters",
                    "type": "string",
                    "example": {
                      "body_gender": "female",
                      "lower_clothes": "jeans",
                      "upper_clothes": "t-shirt"
                    }
                  },
                  "cars_filter": {
                    "description": "JSON stringified object containing car filters",
                    "type": "string",
                    "example": {
                      "color": "red",
                      "model": "sedan",
                      "license_plate_number_contains": "ABC123",
                      "orientation": "front"
                    }
                  },
                  "photo": {
                    "description": "Optional image file for the event",
                    "type": "file"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "faces": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        },
        "parameters": []
      },
      "/smart_cities/findface/watchlists": {
        "get": {
          "operationId": "smart_cities_findface_watchlists_list",
          "summary": "List FindFace Watchlists",
          "description": "List all watchlists from FindFace",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        },
        "post": {
          "operationId": "smart_cities_findface_watchlists_create",
          "summary": "Create FindFace Watchlist",
          "description": "Create a new watchlist in FindFace",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the watchlist"
                  },
                  "color": {
                    "type": "string",
                    "description": "Color of the watchlist"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Watchlist created successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/watchlists/{id}": {
        "get": {
          "operationId": "smart_cities_findface_watchlists_read",
          "summary": "Retrieve FindFace Watchlist",
          "description": "Retrieve a specific watchlist from FindFace",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the watchlist"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "Watchlist not found"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        },
        "patch": {
          "operationId": "smart_cities_findface_watchlists_update",
          "summary": "Update FindFace Watchlist",
          "description": "Update an existing watchlist in FindFace",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the watchlist"
            },
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        },
        "delete": {
          "operationId": "smart_cities_findface_watchlists_delete",
          "summary": "Delete FindFace Watchlist",
          "description": "Delete a specific watchlist from FindFace",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the watchlist"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "404": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/watchlists/human/{id}": {
        "get": {
          "operationId": "smart_cities_watchlists_human",
          "summary": "Retreieve FindFace Human Event From a Watchlist",
          "description": "Retrieve human events from a specific watchlist in FindFace",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the watchlist"
            },
            {
              "name": "query",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Search query for human events"
            }
          ],
          "responses": {
            "200": {
              "description": "List of Human Events",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer"},
                    "name": { "type": "string" },
                    "thumbnail_url": { "type": "string" },
                    "comment": { "type": "string" },
                    "date_created": { "type": "string", "format": "date-time" }
                  }
                }
              }
            },
            "404": {
              "description": "Watchlist not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/event": {
      "post": {
          "operationId": "smart_cities_findface_event_create",
          "summary": "Create FindFace Human Event",
          "description": "Create a new human event in FindFace",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the human event"
                  },
                  "watch_lists": {
                    "type": "string",
                    "description": "JSON stringified array of watchlist IDs"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment for the event"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file for the event"
                  }
                },
                "required": ["name", "watch_lists", "photo"]
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Event Created"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/human/event": {
        "post": {
          "operationId": "findface_human_event_create",
          "summary": "Create FindFace Human Event",
          "description": "Cria um novo evento humano no FindFace.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Nome do evento humano"
                  },
                  "watch_lists": {
                    "type": "string",
                    "description": "JSON stringificado de uma lista de IDs de watchlist"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comentário do evento"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Imagem do evento"
                  }
                },
                "required": ["name", "watch_lists", "photo"]
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Evento criado"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/events/match": {
        "post": {
          "operationId": "smart_cities_findface_event_match",
          "summary": "Match FindFace Event",
          "description": "Recebe eventos de watchlists do FindFace e salva como VectorGeometry.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "matched": {
                    "type": "boolean",
                    "description": "Indica se houve correspondência"
                  },
                  "matched_card": {
                    "type": "object",
                    "description": "Dados do cartão correspondente"
                  },
                  "matched_lists": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "color": { "type": "string" }
                      }
                    },
                    "description": "Lista de watchlists correspondentes"
                  },
                  "camera": {
                    "type": "object",
                    "properties": {
                      "longitude": { "type": "number" },
                      "latitude": { "type": "number" }
                    },
                    "description": "Localização da câmera"
                  },
                  "thumbnail_url": {
                    "type": "string",
                    "description": "URL da imagem miniatura"
                  }
                },
                "required": ["matched", "matched_card", "matched_lists", "camera"]
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Evento recebido e processado"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/events/alerts": {
        "get": {
          "operationId": "smart_cities_findface_events_alerts_list",
          "summary": "List FindFace Event Alerts",
          "description": "List all event alerts from FindFace",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of event alerts",
              "schema": {
                "$ref": "#/definitions/Alert"
              }
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/events/search/alerts": {
        "get": {
          "operationId": "smart_cities_findface_events_search_alerts_list",
          "summary": "Search FindFace Event Alerts",
          "description": "Search for event alerts in FindFace",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Search query for event alerts"
            }
          ],
          "responses": {
            "200": {
              "description": "List of event alerts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Alert"
                }
              }
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/event/alert/acknowledged": {
        "post": {
          "operationId": "smart_cities_findface_event_alert_acknowledged",
          "summary": "Acknowledge FindFace Event Alert",
          "description": "Acknowledge a specific event alert in FindFace",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "acknowledged": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Alert acknowledged successfully"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/findface/camera/url/{id}": {
        "get": {
          "operationId": "smart_cities_findface_camera_url_read",
          "summary": "Retrieve FindFace Camera URL",
          "description": "Retrieve the URL of a specific camera in FindFace",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the camera"
            }
          ],
          "responses": {
            "200": {
              "description": "Camera URL retrieved successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of the camera"
                  }
                }
              }
            },
            "404": {
              "description": "Camera not found"
            }
          },
          "tags": [
            "smart_cities:findface"
          ]
        }
      },
      "/smart_cities/form": {
        "post": {
          "operationId": "smart_cities_form_create",
          "description": "Register Form Data",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "geom": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "rtsp": {
                        "type": "string"
                      },
                      "observations": {
                        "type": "string"
                      }
                    }
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          },
          "tags": [
            "smart_cities:form"
          ]
        },
        "parameters": []
      },
      "/smart_cities/form/request": {
        "get": {
          "operationId": "smart_cities_form_request_list",
          "description": "List all `models.FormStatus` model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ResponseLog"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:form"
          ]
        },
        "parameters": []
      },
      "/smart_cities/form/update": {
        "post": {
          "operationId": "smart_cities_form_update_create",
          "description": "Update Form Status",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  },
                  "order": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "description": "Error message",
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "description": "Error message",
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:form"
          ]
        },
        "parameters": []
      },
      "/smart_cities/image/base64": {
        "post": {
          "operationId": "smart_cities_image_base64_create",
          "description": "Get Base64 data from image",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "URL of the image",
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "description": "Base64 data of the image",
                "type": "string"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "smart_cities:image"
          ]
        },
        "parameters": []
      },
      "/smart_cities/motorola/cameras": {
        "get": {
          "operationId": "smart_cities_motorola_cameras_list",
          "description": "List all cameras from Motorola",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "cameraID": {
                      "type": "string"
                    },
                    "ipAddress": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "latitude": {
                      "type": "string"
                    },
                    "longitude": {
                      "type": "string"
                    },
                    "video": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:motorola"
          ]
        },
        "parameters": []
      },
      "/smart_cities/motorola/events": {
        "get": {
          "operationId": "smart_cities_motorola_events_list",
          "description": "List all events from Motorola",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "description": "List of events.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "eventID": {
                      "type": "string"
                    },
                    "eventName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:motorola"
          ]
        },
        "parameters": []
      },
      "/smart_cities/motorola/events/cameras": {
        "post": {
          "operationId": "smart_cities_motorola_events_cameras_create",
          "description": "List all events interest area from Motorola",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "geojson": {
                    "description": "JSON stringified object representing the selected area",
                    "type": "string"
                  },
                  "camera_id": {
                    "description": "ID of the camera to be used",
                    "type": "string"
                  },
                  "numbersPages": {
                    "description": "Number of pages to be returned",
                    "type": "integer"
                  },
                  "page": {
                    "description": "Page to be returned",
                    "type": "integer"
                  },
                  "date": {
                    "description": "Date and time to be used",
                    "type": "string"
                  },
                  "type_event": {
                    "description": "Type of event to be used",
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "prevPage": {
                    "type": "integer"
                  },
                  "nextPage": {
                    "type": "integer"
                  },
                  "numberPages": {
                    "type": "integer"
                  },
                  "totalResults": {
                    "type": "integer"
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "event": {
                          "type": "object",
                          "properties": {
                            "eventType": {
                              "type": "string"
                            },
                            "eventDescription": {
                              "type": "string"
                            },
                            "eventData": {
                              "type": "string"
                            },
                            "eventImage": {
                              "type": "string"
                            }
                          }
                        },
                        "device": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "ipAddress": {
                              "type": "string"
                            },
                            "timezone": {
                              "type": "string"
                            },
                            "geolocation": {
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "string"
                                },
                                "longitude": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "server": {
                          "type": "object",
                          "properties": {
                            "serverName": {
                              "type": "string"
                            },
                            "serverURL": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:motorola"
          ]
        },
        "parameters": []
      },
      "/smart_cities/neighborhoods": {
        "get": {
          "operationId": "smart_cities_neighborhoods_list",
          "description": "API endpoint to retrieve and filter NeighborhoodsLayer.",
          "parameters": [
            {
              "name": "bairro",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "zona",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "quadra",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "lote",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "n_porta",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "logradouro",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "geom",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/NeighborhoodsGeoFeature"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "smart_cities:neighborhoods"
          ]
        },
        "post": {
          "operationId": "smart_cities_neighborhoods_create",
          "description": "API endpoint to retrieve and filter NeighborhoodsLayer.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/NeighborhoodsGeoFeature"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/NeighborhoodsGeoFeature"
              }
            }
          },
          "tags": [
            "smart_cities:neighborhoods"
          ]
        },
        "parameters": []
      },
      "/smart_cities/neighborhoods/fields": {
        "get": {
          "operationId": "smart_cities_neighborhoods_fields_list",
          "description": "Handle request and return a list of objects NeighborhoodsLayer.",
          "parameters": [
            {
              "name": "bairro",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "zona",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "quadra",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "lote",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "n_porta",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "logradouro",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "geom",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "smart_cities:neighborhoods"
          ]
        },
        "parameters": []
      },
      "/smart_cities/neighborhoods/properties/{id}/detail": {
        "get": {
          "operationId": "smart_cities_neighborhoods_properties_detail_read",
          "description": "View to retrieve `models.NeighborhoodsLayer` model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Neighborhoods"
              }
            }
          },
          "tags": [
            "smart_cities:neighborhoods"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique value identifying this Neighborhoods Layer.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/smart_cities/spectra": {
        "post": {
          "operationId": "smart_cities_spectra_create",
          "summary": "Create Spectra Vector Geometry",
          "description": "Create vector geometry for spectra registration",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "locations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the location.",
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the location.",
                          "type": "string"
                        },
                        "geoshape": {
                          "description": "GeoJSON geometry of the location.",
                          "type": "object"
                        },
                        "geopoint": {
                          "type": "object",
                          "properties": {
                            "lon": {
                              "description": "Longitude of the location.",
                              "type": "number",
                              "format": "float"
                            },
                            "lat": {
                              "description": "Latitude of the location.",
                              "type": "number",
                              "format": "float"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Created"
            },
            "400": {
              "description": "Bad Request - Invalid input data."
            },
            "500": {
              "description": "Internal Server Error - Unexpected issue occurred."
            }
          },
          "tags": [
            "smart_cities:spectra"
          ]
        },
        "parameters": []
      },
      "/smart_cities/spectra/{id}": {
        "get": {
          "operationId": "smart_cities_spectra_read",
          "summary": "Retrieve Spectra Vector Geometry",
          "description": "Retrieve vector geometry for a specific spectra registration",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the spectra registration"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Alert"
              }
            },
            "404": {
              "description": "Not Found - Spectra registration does not exist."
            }
          },
          "tags": [
            "smart_cities:spectra"
          ]
        }
      },
      "/smart_cities/weather": {
        "get": {
          "operationId": "smart_cities_weather_list",
          "description": "Get weather data",
          "parameters": [
            {
              "name": "latlong",
              "in": "query",
              "description": "Latitude and longitude of the location",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "description": "Weather data.",
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "values": {
                        "type": "object",
                        "properties": {
                          "cloudBase": {
                            "type": "number"
                          },
                          "cloudCeiling": {
                            "type": "number"
                          },
                          "cloudCover": {
                            "type": "integer"
                          },
                          "dewPoint": {
                            "type": "number"
                          },
                          "freezingRainIntensity": {
                            "type": "number"
                          },
                          "hailProbability": {
                            "type": "number"
                          },
                          "hailSize": {
                            "type": "number"
                          },
                          "humidity": {
                            "type": "integer"
                          },
                          "precipitationProbability": {
                            "type": "integer"
                          },
                          "pressureSeaLevel": {
                            "type": "number"
                          },
                          "pressureSurfaceLevel": {
                            "type": "number"
                          },
                          "rainIntensity": {
                            "type": "number"
                          },
                          "sleetIntensity": {
                            "type": "number"
                          },
                          "snowIntensity": {
                            "type": "number"
                          },
                          "temperature": {
                            "type": "number"
                          },
                          "temperatureApparent": {
                            "type": "number"
                          },
                          "uvHealthConcern": {
                            "type": "integer"
                          },
                          "uvIndex": {
                            "type": "integer"
                          },
                          "visibility": {
                            "type": "number"
                          },
                          "weatherCode": {
                            "type": "integer"
                          },
                          "windDirection": {
                            "type": "integer"
                          },
                          "windGust": {
                            "type": "number"
                          },
                          "windSpeed": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number"
                      },
                      "lon": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "smart_cities:weather"
          ]
        },
        "parameters": []
      },
      "/smart_cities/deepneuronics/events": {
        "post": {
          "operationId": "smart_cities_deepneuronics_events_create",
          "summary": "Create DeepNeuroNics Event",
          "description": "Create a new event in DeepNeuroNics",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "classification": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of classification codes"
                  },
                  "locations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geopoint": {
                          "type": "object",
                          "properties": {
                            "lat": { "type": "number" },
                            "lon": { "type": "number" }
                          }
                        },
                        "geoshape": {
                          "type": "object",
                          "description": "GeoJSON shape object"
                        }
                      }
                    },
                    "description": "List of location objects"
                  },
                  "behaviorsentence": {
                    "type": "string",
                    "description": "Behavior sentence (optional)"
                  },
                  "other_properties": {
                    "type": "object",
                    "description": "Other event properties"
                  }
                }
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Event created successfully"
            }
          },
          "tags": [
            "smart_cities:deepneuronics"
          ]
        }
      },
      "/smart_cities/deepneuronics/events/{id}": {
        "get": {
          "operationId": "smart_cities_deepneuronics_events_read",
          "summary": "Retrieve DeepNeuroNics Event",
          "description": "Retrieve details of a specific event in DeepNeuroNics",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the event"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeepNeuroNicsEvent"
              }
            },
            "404": {
              "description": "Event not found"
            }
          },
          "tags": [
            "smart_cities:deepneuronics"
          ]
        }
      },
      "/smart_cities/alerts/{id}":{
        "get": {
          "operationId": "smart_cities_alerts_read",
          "summary": "Retrieve Alert",
          "description": "Retrieve details of a specific alert",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the alert"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Alert"
              }
            },
            "404": {
              "description": "Alert not found"
            }
          },
          "tags": [
            "smart_cities:alerts"
          ]
        }
      },
      "/smart_cities/alerts/history/{id}":{
        "get": {
          "operationId": "smart_cities_alerts_history_read",
          "summary": "Retrieve Alert History",
          "description": "Retrieve history of a specific alert",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the alert"
            }
          ],
          "responses": {
            "200": {
              "description": "Alert History",
              "schema": {
                "type": "array"
              }
            },
            "404": {
              "description": "Alert history not found"
            }
          },
          "tags": [
            "smart_cities:alerts"
          ]
        }
      },
      "/smart_cities/alerts": {
        "get": {
          "operationId": "smart_cities_alerts_list",
          "summary": "List Alerts",
          "description": "List all alerts with optional filtering",
          "parameters": [
            {
              "name": "start_date",
              "in": "query",
              "description": "Filter alerts that occurred after this date",
              "required": false,
              "type": "string",
              "format": "date"
            },
            {
              "name": "end_date",
              "in": "query",
              "description": "Filter alerts that occurred before this date",
              "required": false,
              "type": "string",
              "format": "date"
            },
            {
              "name": "classification",
              "in": "query",
              "description": "Filter alerts by classification",
              "required": false,
              "type": "string"
            },
            {
              "name": "event_type",
              "in": "query",
              "description": "Filter alerts by event type",
              "required": false,
              "type": "string"
            },
            {
              "name": "q",
              "in": "query",
              "description": "Search term for filtering alerts",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "List of alerts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Alert"
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid query parameters"
            }
          },
          "tags": [
            "smart_cities:alerts"
          ]
        }
      },
      "/smart_cities/report_hotline": {
        "post": {
          "operationId": "smart_cities_report_hotline_create",
          "summary": "Register Hotline Alert",
          "description": "Register a hotline alert and create an Alert object.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "indicador": {
                    "type": "string",
                    "description": "Indicator code for the alert (first 2 chars used for category)"
                  },
                  "localizacoes": {
                    "type": "array",
                    "description": "List of locations for the alert",
                    "items": {
                      "type": "object",
                      "properties": {
                        "geopoint": {
                          "type": "object",
                          "properties": {
                            "lat": { "type": "number" },
                            "lon": { "type": "number" }
                          }
                        },
                        "geoshape": {
                          "type": "object",
                          "description": "GeoJSON shape object"
                        }
                      }
                    }
                  },
                  "other_properties": {
                    "type": "object",
                    "description": "Other alert properties"
                  }
                },
                "required": ["indicador"]
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Hotline alert created",
              "schema": {
                "$ref": "#/definitions/Alert"
              }
            },
            "400": {
              "description": "Missing or invalid parameters"
            }
          },
          "tags": [
            "smart_cities:hotline"
          ]
        }
      },
      "/smart_cities/victimization": {
        "post": {
          "operationId": "smart_cities_victimization_post",
          "summary": "Retrieve Victimization Data",
          "description": "Retrieve victimization data by date, city, neighborhood and classification.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date for filtering"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date",
                    "description": "End date for filtering"
                  },
                  "city": {
                    "type": "string",
                    "description": "City name"
                  },
                  "neighborhood": {
                    "type": "string",
                    "description": "Neighborhood name"
                  },
                  "classification": {
                    "type": "string",
                    "description": "Classification code"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Victimization data",
              "schema": {
                "type": "object"
              }
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "smart_cities:victimization"
          ]
        }
      },
      "/smart_cities/victimization/city": {
        "get": {
          "operationId": "smart_cities_victimization_city_list",
          "summary": "List Victimization Cities",
          "description": "Retrieve a list of cities with victimization data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of cities",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "smart_cities:victimization"
          ]
        }
      },
      "/smart_cities/victimization/neighborhood": {
        "get": {
          "operationId": "smart_cities_victimization_neighborhood_list",
          "summary": "List Victimization Neighborhoods",
          "description": "Retrieve a list of neighborhoods with victimization data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of neighborhoods",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "smart_cities:victimization"
          ]
        }
      },
      "/user/file": {
        "get": {
          "operationId": "user_file_list",
          "description": "Basemap view creates list and data.",
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "name",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "date_created",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "is_active",
              "in": "query",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/UserUploadedFile"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "post": {
          "operationId": "user_file_create",
          "description": "Basemap view creates list and data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "parameters": []
      },
      "/user/file/geo/detail/{id}": {
        "get": {
          "operationId": "user_file_geo_detail_read",
          "description": "View to retrieve `models.UserUploadedFileGeometry` model data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUploadedFileGeometryDetail"
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Uploaded File - Geometry.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/user/file/geo/{id}": {
        "get": {
          "operationId": "user_file_geo_read",
          "description": "View to retrieve `models.UserUploadedFileGeometry` model data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/UserUploadedFileGeometryList"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/user/group": {
        "get": {
          "operationId": "user_group_list",
          "description": "Group list and create view data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Group"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "post": {
          "operationId": "user_group_create",
          "description": "Group list and create view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "parameters": []
      },
      "/user/group/{id}": {
        "get": {
          "operationId": "user_group_read",
          "description": "Group retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "put": {
          "operationId": "user_group_update",
          "description": "Group retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "patch": {
          "operationId": "user_group_partial_update",
          "description": "Group retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "delete": {
          "operationId": "user_group_delete",
          "description": "Group retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "user:group"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this group.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/user/logged": {
        "get": {
          "operationId": "user_logged_list",
          "description": "Get user logged data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:users"
          ]
        },
        "parameters": []
      },
      "/user/map/print/log": {
        "post": {
          "operationId": "user_map_print_log_create",
          "description": "Handles the POST request for user requests",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "description": "Parameters of the request",
                    "type": "object"
                  },
                  "data": {
                    "description": "Data of the request",
                    "type": "object"
                  },
                  "type": {
                    "description": "Type of the request",
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "user:map"
          ]
        },
        "parameters": []
      },
      "/user/role": {
        "get": {
          "operationId": "user_role_list",
          "description": "Role list and create view data.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Role"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "post": {
          "operationId": "user_role_create",
          "description": "Role list and create view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "parameters": []
      },
      "/user/role/{id}": {
        "get": {
          "operationId": "user_role_read",
          "description": "Role retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "put": {
          "operationId": "user_role_update",
          "description": "Role retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "patch": {
          "operationId": "user_role_partial_update",
          "description": "Role retrieve, update and destroy view data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "delete": {
          "operationId": "user_role_delete",
          "description": "Role retrieve, update and destroy view data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "user:role"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this role.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/user/sector": {
        "get": {
          "operationId": "user_sector_list",
          "description": "\"API to return all available sectors.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Sector"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "user:sector"
          ]
        },
        "parameters": []
      },
      "/user/settings": {
        "put": {
          "operationId": "user_settings_update",
          "description": "View to update authenticated User Settings.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserSettings"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserSettings"
              }
            }
          },
          "tags": [
            "user:settings"
          ]
        },
        "patch": {
          "operationId": "user_settings_partial_update",
          "description": "View to update authenticated User Settings.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserSettings"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserSettings"
              }
            }
          },
          "tags": [
            "user:settings"
          ]
        },
        "parameters": []
      },
      "/user/{id}": {
        "get": {
          "operationId": "user_read",
          "description": "\"API to return all users along with their respective sector ID.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "user:users"
          ]
        },
        "put": {
          "operationId": "user_update",
          "description": "\"API to return all users along with their respective sector ID.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "user:users"
          ]
        },
        "patch": {
          "operationId": "user_partial_update",
          "description": "\"API to return all users along with their respective sector ID.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "user:users"
          ]
        },
        "delete": {
          "operationId": "user_delete",
          "description": "\"API to return all users along with their respective sector ID.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "user:users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this user.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/user/{id}/file": {
        "get": {
          "operationId": "user_file_read",
          "description": "Class for delete and update User Upload File data.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "put": {
          "operationId": "user_file_update",
          "description": "Class for delete and update User Upload File data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "patch": {
          "operationId": "user_file_partial_update",
          "description": "Class for delete and update User Upload File data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUploadedFile"
              }
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "delete": {
          "operationId": "user_file_delete",
          "description": "Class for delete and update User Upload File data.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "user:file"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique integer value identifying this Uploaded File.",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "/tickets": {
        "get": {
          "operationId": "tickets_list",
          "summary": "List Tickets",
          "description": "Retrieve a list of tickets for the authenticated user. Admins see all tickets; other users see their own or those related to their roles.",
          "responses": {
            "200": {
              "description": "A list of tickets",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Ticket"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            }
          },
          "tags": [
            "tickets"
          ]
        },
        "post": {
          "operationId": "tickets_create",
          "summary": "Create Ticket",
          "description": "Create a new ticket. Attachments can be uploaded as multipart/form-data.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Ticket"
              }
            },
            {
              "name": "attachments",
              "in": "formData",
              "required": false,
              "type": "string",
              "format": "binary",
              "description": "One or more files to attach to the ticket"
            }
          ],
          "consumes": [
            "multipart/form-data",
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Ticket created successfully",
              "schema": {
                "$ref": "#/definitions/Ticket"
              }
            },
            "400": {
              "description": "Invalid input or attachment error"
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/tickets/{id}": {
        "get": {
          "operationId": "tickets_read",
          "summary": "Retrieve Ticket",
          "description": "Retrieve details of a specific ticket by its ID. Admins can access any ticket; other users can only access their own tickets.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the ticket to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Ticket details",
              "schema": {
                "$ref": "#/definitions/Ticket"
              }
            },
            "404": {
              "description": "Ticket not found"
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/tickets/{id}/status": {
        "get": {
          "operationId": "tickets_status_read",
          "summary": "Retrieve Ticket Status",
          "description": "Retrieve the status details of a specific ticket by its ID. Only admins can access this endpoint.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the ticket to retrieve status for"
            }
          ],
          "responses": {
            "200": {
              "description": "Ticket status details",
              "schema": {
                "$ref": "#/definitions/TicketStatus"
              }
            },
            "404": {
              "description": "Ticket status not found"
            }
          },
          "tags": [
            "tickets"
          ]
        },
        "patch": {
          "operationId": "tickets_status_update",
          "summary": "Update Ticket Status",
          "description": "Update the status of a specific ticket by its ID. Only admins can update ticket status. Attachments can be uploaded as multipart/form-data.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "ID of the ticket to update status for"
            },
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TicketStatus"
              }
            },
            {
              "name": "attachments",
              "in": "formData",
              "required": false,
              "type": "string",
              "format": "binary",
              "description": "One or more files to attach to the ticket status",
              "allowMultiple": true
            }
          ],
          "consumes": [
            "multipart/form-data",
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Ticket analyzed and history updated",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "ticket analyzed and history updated"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input or attachment error"
            },
            "404": {
              "description": "Ticket or ticket status not found"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/tickets/choices": {
        "get": {
          "operationId": "tickets_choices_list",
          "summary": "Get Ticket Status Choices",
          "description": "Retrieve all possible choices for ticket status and priority. Useful for populating dropdowns in forms.",
          "responses": {
            "200": {
              "description": "A dictionary with status and priority choices",
              "schema": {
                "type": "object",
                "properties": {
                  "status_category_choices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": { "type": "string" },
                        "display": { "type": "string" }
                      }
                    }
                  },
                  "priority_choices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": { "type": "string" },
                        "display": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/tickets/download-tickets": {
        "post": {
          "operationId": "tickets_download_xlsx",
          "summary": "Download Tickets as Excel",
          "description": "Generate and download an Excel (.xlsx) report for a list of ticket IDs. Requires authentication.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "ticket_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "List of ticket IDs to include in the Excel report"
                  }
                },
                "required": ["ticket_ids"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Excel file generated successfully",
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "400": {
              "description": "No ticket IDs provided or invalid input"
            },
            "404": {
              "description": "No tickets found with the provided IDs"
            },
            "501": {
              "description": "Excel generation functionality is temporarily unavailable"
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/tickets/send-email": {
        "post": {
          "operationId": "tickets_send_email",
          "summary": "Send Ticket Email",
          "description": "Send an email related to a ticket to the user. Requires the ticket ID and email data. Currently, the email functionality is temporarily unavailable.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "ticket_id": {
                    "type": "integer",
                    "description": "ID of the ticket to send the email for"
                  },
                  "email": {
                    "type": "string",
                    "description": "Recipient email address"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Email subject"
                  },
                  "message": {
                    "type": "string",
                    "description": "Email message body"
                  }
                },
                "required": ["ticket_id", "email", "subject", "message"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Email sent successfully (when implemented)",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "Email sent successfully."
                  }
                }
              }
            },
            "404": {
              "description": "Ticket not found",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Ticket not found."
                  }
                }
              }
            },
            "501": {
              "description": "Email functionality is temporarily unavailable",
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "Email functionality is temporarily unavailable."
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "tickets"
          ]
        }
      },
      "/download/attachments/critcs_and_suggestions/answer/{filename}": {
        "get": {
          "operationId": "download_document",
          "summary": "Download Ticket Answer Attachment",
          "description": "Download an attachment file from a ticket answer by filename. Returns the file as an attachment if it exists.",
          "parameters": [
            {
              "name": "filename",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Name of the file to download (including extension)"
            }
          ],
          "responses": {
            "200": {
              "description": "File downloaded successfully",
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "404": {
              "description": "File not found",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Arquivo não encontrado"
                  }
                }
              }
            }
          },
          "tags": [
            "tickets"
          ]
        }
      }
    },
    "definitions": {
      "ConsultLog": {
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer",
            "x-nullable": true
          },
          "parameters": {
            "title": "Parameters",
            "type": "integer",
            "x-nullable": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "AgroStatus": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "enum": [
              "Pending",
              "Searching images",
              "Processing",
              "Done",
              "Error",
              "Canceled",
              "Validating data",
              "Analyzing Properties",
              "Converting images"
            ]
          },
          "request": {
            "title": "Request",
            "type": "integer",
            "x-nullable": true
          },
          "date_changed": {
            "title": "Date changed",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "SocioEnvironmental": {
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer",
            "x-nullable": true
          },
          "parameters": {
            "title": "Parameters",
            "type": "integer",
            "x-nullable": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Contact": {
        "required": [
          "cpf",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "cpf": {
            "title": "CPF",
            "type": "string",
            "description": "Contact's CPF"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Contact's name"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "format": "date",
            "description": "Contact's birthdate"
          },
          "apf": {
            "title": "APF",
            "type": "string",
            "description": "Contact's APF"
          },
          "car": {
            "title": "CAR",
            "type": "string",
            "description": "Contact's CAR"
          },
          "nirf": {
            "title": "NIRF",
            "type": "string",
            "description": "Contact's NIRF"
          }
        }
      },
      "Property": {
        "required": [
          "id",
          "contact_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "contact_id": {
            "title": "Contact ID",
            "type": "integer",
            "description": "ID of the contact associated with the property"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Property name"
          },
          "nirf": {
            "title": "NIRF",
            "type": "string",
            "description": "Property NIRF"
          },
          "car_status": {
            "title": "CAR Status",
            "type": "string",
            "description": "CAR status"
          },
          "uf": {
            "title": "UF",
            "type": "string",
            "description": "State (UF)"
          },
          "county": {
            "title": "County",
            "type": "string",
            "description": "County"
          },
          "geom": {
            "title": "Geometry",
            "type": "object",
            "description": "Feature Collection geometry"
          },
          "area": {
            "title": "Area",
            "type": "number",
            "description": "Property area in hectares"
          },
          "is_favorite": {
            "title": "Is Favorite",
            "type": "boolean",
            "description": "Favorite status"
          }
        }
      },
      "Gleba": {
        "required": [
          "property",
          "geometry",
          "name",
          "area"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "property": {
            "title": "Property",
            "type": "integer",
            "description": "ID of the property this gleba belongs to"
          },
          "geometry": {
            "title": "Geometry",
            "type": "object",
            "description": "Geometry of the gleba (GeoJSON)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the gleba"
          },
          "area": {
            "title": "Area",
            "type": "number",
            "description": "Area of the gleba"
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_updated": {
            "title": "Date updated",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "TokenObtainPair": {
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string",
            "minLength": 1
          },
          "password": {
            "title": "Password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "TokenRefresh": {
        "required": [
          "refresh"
        ],
        "type": "object",
        "properties": {
          "refresh": {
            "title": "Refresh",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Status": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "enum": [
              "Pending",
              "Done",
              "Error",
              "Canceled"
            ]
          },
          "request": {
            "title": "Request",
            "type": "integer",
            "x-nullable": true
          },
          "date_changed": {
            "title": "Date changed",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ManagementResponseLog": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "title": "Data",
              "type": "object",
              "x-nullable": true
            },
            "x-nullable": true
          },
          "parameters": {
            "title": "Parameters",
            "type": "object",
            "x-nullable": true
          },
          "type": {
            "title": "Type",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer",
            "x-nullable": true
          },
          "parameters": {
            "$ref": "#/definitions/ManagementResponseLog"
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Basemap": {
        "required": [
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "title": "Url",
            "description": "ZXY url to map. Accepts //, http or https",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "label": {
            "title": "Label",
            "description": "Label to show on app",
            "type": "string",
            "maxLength": 40,
            "x-nullable": true
          },
          "tag": {
            "title": "Tag",
            "description": "Tag to show on app",
            "type": "string",
            "maxLength": 40,
            "minLength": 1
          },
          "attribution": {
            "title": "Attribution",
            "description": "Basemap attribution",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "order": {
            "title": "Order",
            "description": "Basemap order on app",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "Bookmark": {
        "required": [
          "name",
          "bbox"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name of bookmark",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "integer",
              "x-nullable": true
            },
            "uniqueItems": true
          },
          "bbox": {
            "title": "Bbox",
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "Filter": {
        "required": [
          "type",
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "default": {
            "title": "Default value for filters",
            "description": "Shows default value for filter on app",
            "type": "string",
            "maxLength": 40,
            "x-nullable": true
          },
          "alias": {
            "title": "Filter alias",
            "description": "Indicates which field will be filtered on app",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "type": {
            "title": "Filter Type",
            "description": "Type of filter on app",
            "type": "string",
            "maxLength": 40,
            "minLength": 1
          },
          "label": {
            "title": "Filter Label",
            "description": "A default label for filter",
            "type": "string",
            "maxLength": 40,
            "minLength": 1
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "uniqueItems": true
          }
        }
      },
      "Geoserver": {
        "required": [
          "name",
          "wms_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "description": "Geoserver Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "wms_url": {
            "title": "Wms url",
            "description": "Default url to Web Map Service (WMS)",
            "type": "string",
            "maxLength": 500,
            "minLength": 1
          },
          "preview_url": {
            "title": "Geoserver Preview URL",
            "description": "Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&WIDTH=40&HEIGHT=40",
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "x-nullable": true
          },
          "thumbnail_url": {
            "title": "Geoserver Thumbnail URL",
            "description": "Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/wms/reflect?",
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "x-nullable": true
          },
          "geoserver_url": {
            "title": "Geoserver URL",
            "description": "Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/",
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "x-nullable": true
          }
        }
      },
      "Wms": {
        "required": [
          "name",
          "group"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "thumbnail_blob": {
            "title": "Thumbnail blob",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "active_on_init": {
            "title": "Active on Init",
            "description": "Show layer as active when app starts",
            "type": "boolean"
          },
          "is_downloadable": {
            "title": "Is Downloadable",
            "description": "Enable layer download",
            "type": "boolean"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "bbox": {
            "title": "Bbox",
            "type": "string",
            "x-nullable": true
          },
          "update_rate": {
            "title": "Layer update rate",
            "description": "Defines miliseconds to update layer on map",
            "type": "number",
            "x-nullable": true
          },
          "has_preview": {
            "title": "Has Preview",
            "description": "Show layer thumbnails on app",
            "type": "boolean"
          },
          "has_detail": {
            "title": "Has Detail",
            "description": "Show layer legend on app",
            "type": "boolean"
          },
          "detail_width": {
            "title": "Detail width",
            "description": "Max width for legend on app",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "geoserver_layer_name": {
            "title": "Geoserver Layer Name",
            "description": "Geoserver layer name",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "geoserver_layer_namespace": {
            "title": "Geoserver Layer Namespace",
            "description": "Geoserver layer namespace",
            "type": "string",
            "maxLength": 40,
            "x-nullable": true
          },
          "geoserver_layer_options": {
            "title": "Geoserver Layer Options",
            "description": "Geoserver layer extra options",
            "type": "object",
            "x-nullable": true
          },
          "queryable": {
            "title": "Is queryable",
            "description": "Shows popup attribution on app",
            "type": "boolean"
          },
          "has_opacity": {
            "title": "Has opacity",
            "description": "Shows opacity label on app",
            "type": "boolean"
          },
          "default_opacity": {
            "title": "Default opacity",
            "description": "Default value opacity between 0 and 100",
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "x-nullable": true
          },
          "has_sublayers": {
            "title": "Has Sublayers",
            "description": "Shows sublayers on app",
            "type": "boolean"
          },
          "wms_layer_type": {
            "title": "WMS Layer Type",
            "type": "string",
            "enum": [
              "Raster",
              "Point",
              "Point-Icon",
              "Line",
              "Polygon",
              "Video"
            ]
          },
          "preview_type": {
            "title": "Preview type",
            "description": "Layer preview/thumbnail type",
            "type": "string",
            "enum": [
              "thumbnail",
              "preview"
            ],
            "x-nullable": true
          },
          "has_metadata": {
            "title": "Has Metadata",
            "description": "Has metadata attributes on Geoserver",
            "type": "boolean"
          },
          "group": {
            "title": "Group",
            "type": "integer"
          },
          "geoserver": {
            "title": "Geoserver",
            "type": "integer",
            "x-nullable": true
          }
        }
      },
      "Tms": {
        "required": [
          "name",
          "group"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "thumbnail_blob": {
            "title": "Thumbnail blob",
            "type": "string",
            "readOnly": true
          },
          "legend_blob": {
            "title": "Legend blob",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "active_on_init": {
            "title": "Active on Init",
            "description": "Show layer as active when app starts",
            "type": "boolean"
          },
          "is_downloadable": {
            "title": "Is Downloadable",
            "description": "Enable layer download",
            "type": "boolean"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "bbox": {
            "title": "Bbox",
            "type": "string",
            "x-nullable": true
          },
          "update_rate": {
            "title": "Layer update rate",
            "description": "Defines miliseconds to update layer on map",
            "type": "number",
            "x-nullable": true
          },
          "url": {
            "title": "Tile Map Service Url",
            "type": "string",
            "maxLength": 500,
            "x-nullable": true
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date",
            "x-nullable": true
          },
          "max_native_zoom": {
            "title": "Max Native Zoom",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "is_tms": {
            "title": "Is a TMS Layer",
            "description": "TMS layer = True. XYZ layer = False",
            "type": "boolean"
          },
          "image_preview": {
            "title": "Image preview",
            "type": "string",
            "readOnly": true,
            "x-nullable": true,
            "format": "uri"
          },
          "legend": {
            "title": "Legend",
            "type": "string",
            "readOnly": true,
            "x-nullable": true,
            "format": "uri"
          },
          "group": {
            "title": "Group",
            "type": "integer"
          }
        }
      },
      "Vector": {
        "required": [
          "name",
          "group"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "active_on_init": {
            "title": "Active on Init",
            "description": "Show layer as active when app starts",
            "type": "boolean"
          },
          "is_downloadable": {
            "title": "Is Downloadable",
            "description": "Enable layer download",
            "type": "boolean"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "bbox": {
            "title": "Bbox",
            "type": "string",
            "x-nullable": true
          },
          "update_rate": {
            "title": "Layer update rate",
            "description": "Defines miliseconds to update layer on map",
            "type": "number",
            "x-nullable": true
          },
          "file": {
            "title": "File Path",
            "type": "string",
            "readOnly": true,
            "x-nullable": true,
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "x-nullable": true
          },
          "type": {
            "title": "Vector Layer Type",
            "type": "string",
            "enum": [
              "Raster",
              "Point",
              "Point-Icon",
              "Line",
              "Polygon",
              "Video",
              "streaming",
              "Document"
            ]
          },
          "color": {
            "title": "Color",
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 25,
            "minLength": 1
          },
          "color_fill": {
            "title": "Color Fill",
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 25,
            "minLength": 1
          },
          "has_opacity": {
            "title": "Has opacity",
            "description": "Shows opacity label on app",
            "type": "boolean"
          },
          "default_opacity": {
            "title": "Default opacity",
            "description": "Default value opacity between 0 and 100",
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "x-nullable": true
          },
          "image_preview": {
            "title": "Image preview",
            "type": "string",
            "readOnly": true,
            "x-nullable": true,
            "format": "uri"
          },
          "thumbnail_blob": {
            "title": "Thumbnail blob",
            "type": "string",
            "readOnly": true
          },
          "group": {
            "title": "Group",
            "type": "integer"
          }
        }
      },
      "Layer": {
        "required": [
          "filters",
          "name",
          "group"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "bbox": {
            "title": "Bbox",
            "type": "string",
            "readOnly": true
          },
          "wms": {
            "$ref": "#/definitions/Wms"
          },
          "tms": {
            "$ref": "#/definitions/Tms"
          },
          "vector": {
            "$ref": "#/definitions/Vector"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Filter"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "x-nullable": true
          },
          "active_on_init": {
            "title": "Active on Init",
            "description": "Show layer as active when app starts",
            "type": "boolean"
          },
          "is_downloadable": {
            "title": "Is Downloadable",
            "description": "Enable layer download",
            "type": "boolean"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "update_rate": {
            "title": "Layer update rate",
            "description": "Defines miliseconds to update layer on map",
            "type": "number",
            "x-nullable": true
          },
          "group": {
            "title": "Group",
            "type": "integer"
          }
        }
      },
      "LayerGroup": {
        "required": [
          "name",
          "order"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "layers_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "description": "Group Layer name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "order": {
            "title": "Order",
            "description": "Order to show on app",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "VectorGeometry": {
        "required": [
          "geom",
          "vector_uploaded"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "geom": {
            "title": "Geom",
            "type": "string"
          },
          "properties": {
            "title": "Properties",
            "description": "Uploaded file properties.",
            "type": "object",
            "x-nullable": true
          },
          "vector_uploaded": {
            "title": "Vector uploaded",
            "type": "string"
          }
        }
      },
      "VectorGeometryList": {
        "required": [
          "geom"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "properties": {
            "title": "Properties",
            "description": "Uploaded file properties.",
            "type": "object",
            "x-nullable": true
          },
          "geom": {
            "title": "Geom",
            "type": "string"
          }
        }
      },
      "VectorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "properties": {
            "title": "Properties",
            "description": "Uploaded file properties.",
            "type": "object",
            "x-nullable": true
          }
        }
      },
      "Usage": {
        "required": [
          "user",
          "time"
        ],
        "type": "object",
        "properties": {
          "user": {
            "title": "User",
            "type": "integer"
          },
          "time": {
            "title": "Time",
            "type": "string"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "pattern": "^[\\w.@+-]+$",
            "readOnly": true
          },
          "sector_id": {
            "title": "Sector id",
            "type": "string",
            "readOnly": true
          },
          "sector_name": {
            "title": "Sector name",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EagleEyeToken": {
        "required": [
          "access",
          "refresh",
          "expires_in"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "access": {
            "title": "Access Token",
            "description": "Token used to authenticate on EagleEye API.",
            "type": "string",
            "minLength": 1
          },
          "refresh": {
            "title": "Refresh Token",
            "description": "Token used to generate other tokens.",
            "type": "string",
            "minLength": 1
          },
          "expires_in": {
            "title": "Expires in",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SimpleGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          }
        }
      },
      "SimpleLayer": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "LayerPermission": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleGroup"
            },
            "readOnly": true
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleLayer"
            },
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "Algorithm": {
        "required": [
          "name",
          "group"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "video_url": {
            "title": "Video URL",
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "x-nullable": true
          },
          "pdf_url": {
            "title": "PDF URL",
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "x-nullable": true
          },
          "group": {
            "title": "Group",
            "type": "integer"
          }
        }
      },
      "AlgorithmAndGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "algorithms": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Algorithm"
            }
          },
          "name": {
            "title": "Name",
            "description": "Group name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "AlgorithmGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "description": "Group name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "Analytic": {
        "required": [
          "name",
          "url",
          "tooltip"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "image_preview": {
            "title": "Image preview",
            "type": "string",
            "readOnly": true,
            "format": "uri"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "url": {
            "title": "URL",
            "type": "string",
            "format": "uri",
            "maxLength": 200,
            "minLength": 1
          },
          "image": {
            "title": "Image",
            "type": "string",
            "readOnly": true
          },
          "tooltip": {
            "title": "Tooltip",
            "type": "string",
            "minLength": 1
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "SimpleUser": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "type": "string",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150,
            "minLength": 1
          }
        }
      },
      "BabelStreetLocationStatus": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "$ref": "#/definitions/SimpleUser"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "enum": [
              "Pending",
              "Done",
              "Error"
            ]
          },
          "date_changed": {
            "title": "Date changed",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "log": {
            "title": "Log",
            "type": "string",
            "x-nullable": true
          },
          "request": {
            "title": "Request",
            "type": "integer",
            "x-nullable": true
          }
        }
      },
      "DronePathList": {
        "required": [
          "date_flight_start"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "readOnly": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_flight_start": {
            "title": "Date flight start",
            "type": "string",
            "format": "date-time"
          },
          "date_flight_end": {
            "title": "Date flight end",
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "observation": {
            "title": "Observation",
            "type": "string",
            "maxLength": 500,
            "x-nullable": true
          },
          "video_url": {
            "title": "Video url",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "readOnly": true
          },
          "flight_type": {
            "title": "Flight Type",
            "type": "string",
            "enum": [
              "VLOS",
              "EVLOS"
            ],
            "x-nullable": true
          },
          "operation_type": {
            "title": "Operation Type",
            "type": "string",
            "enum": [
              "padrao",
              "sombra",
              "aerolevantamento",
              "especiais"
            ],
            "x-nullable": true
          }
        }
      },
      "DronePath": {
        "required": [
          "date_flight_start",
          "geom"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "readOnly": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_flight_start": {
            "title": "Date flight start",
            "type": "string",
            "format": "date-time"
          },
          "date_flight_end": {
            "title": "Date flight end",
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "operation_type": {
            "title": "Operation Type",
            "type": "string",
            "enum": [
              "padrao",
              "sombra",
              "aerolevantamento",
              "especiais"
            ],
            "x-nullable": true
          },
          "flight_type": {
            "title": "Flight Type",
            "type": "string",
            "enum": [
              "VLOS",
              "EVLOS"
            ],
            "x-nullable": true
          },
          "observation": {
            "title": "Observation",
            "type": "string",
            "maxLength": 500,
            "x-nullable": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "readOnly": true
          },
          "geom": {
            "title": "Geom",
            "type": "string"
          }
        }
      },
      "Alert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "alert_category": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AlertCategory"
            }
          },
          "geom": {
            "type": "string",
            "description": "Geometry (WKT or GeoJSON)"
          },
          "properties": {
            "type": "object",
            "description": "Alert properties"
          },
          "type": {
            "type": "string",
            "description": "Alert type"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AlertCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "category": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AlertHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "alert": {
            "$ref": "#/definitions/Alert"
          },
          "user": {
            "$ref": "#/definitions/SimpleUser"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FindFaceWatchlist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          }
        }
      },
      "AlertConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the alert configuration",
            "maxLength": 255,
            "x-nullable": true
          },
          "alert_category": {
            "$ref": "#/definitions/AlertCategory",
            "description": "Alert category that this alert belongs to"
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Layer"
            },
            "description": "Layers that belong to this alert"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Role"
            },
            "description": "Roles that can access this alert"
          },
          "email_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email addresses to notify for this alert"
          },
          "api_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of API endpoints to notify for this alert"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["alert_category"]
      },
      "AlertLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "$ref": "#/definitions/User",
            "description": "User who triggered the alert log",
            "x-nullable": true
          },
          "alert": {
            "$ref": "#/definitions/Alert",
            "description": "Alert associated with this log",
            "x-nullable": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ResponseLog": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "title": "Data",
              "type": "object",
              "x-nullable": true
            },
            "x-nullable": true
          },
          "parameters": {
            "title": "Parameters",
            "type": "object",
            "x-nullable": true
          },
          "type": {
            "title": "Type",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "NeighborhoodsGeoFeature": {
        "required": [
          "id",
          "geom"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000
          },
          "n_porta": {
            "title": "N porta",
            "type": "string",
            "x-nullable": true
          },
          "logradouro": {
            "title": "Logradouro",
            "type": "string",
            "x-nullable": true
          },
          "zona": {
            "title": "Zona",
            "type": "string",
            "x-nullable": true
          },
          "quadra": {
            "title": "Quadra",
            "type": "string",
            "x-nullable": true
          },
          "lote": {
            "title": "Lote",
            "type": "string",
            "x-nullable": true
          },
          "geom": {
            "title": "Geom",
            "type": "string"
          }
        }
      },
      "Neighborhoods": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000
          },
          "bairro": {
            "title": "Bairro",
            "type": "string",
            "x-nullable": true
          },
          "zona": {
            "title": "Zona",
            "type": "string",
            "x-nullable": true
          },
          "quadra": {
            "title": "Quadra",
            "type": "string",
            "x-nullable": true
          },
          "lote": {
            "title": "Lote",
            "type": "string",
            "x-nullable": true
          },
          "n_porta": {
            "title": "N porta",
            "type": "string",
            "x-nullable": true
          },
          "logradouro": {
            "title": "Logradouro",
            "type": "string",
            "x-nullable": true
          },
          "atributos": {
            "title": "Atributos",
            "type": "object",
            "x-nullable": true
          }
        }
      },
      "SimpleRole": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          }
        }
      },
      "User": {
        "required": [
          "username",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "type": "string",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150,
            "minLength": 1
          },
          "first_name": {
            "title": "First name",
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "title": "Last name",
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "title": "Email address",
            "type": "string",
            "format": "email",
            "maxLength": 254,
            "minLength": 1
          },
          "settings": {
            "title": "Settings",
            "type": "string",
            "readOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleRole"
            },
            "readOnly": true
          },
          "sector": {
            "title": "Sector",
            "type": "string",
            "readOnly": true
          },
          "sector_id": {
            "title": "Sector id",
            "type": "integer",
            "readOnly": true
          },
          "is_superuser": {
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them.",
            "type": "boolean"
          },
          "is_staff": {
            "title": "Staff status",
            "description": "Designates whether the user can log into this admin site.",
            "type": "boolean"
          },
          "components": {
            "title": "Components",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UserUploadedFile": {
        "required": [
          "name",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "date_created": {
            "title": "Date created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_active": {
            "title": "Is active",
            "type": "boolean"
          },
          "user": {
            "title": "User",
            "type": "integer"
          }
        }
      },
      "UserUploadedFileGeometryDetail": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "UserUploadedFileGeometryList": {
        "required": [
          "geom"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "geom": {
            "title": "Geom",
            "type": "string"
          }
        }
      },
      "Group": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleRole"
            },
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "layer_permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "uniqueItems": true
          },
          "component_permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "uniqueItems": true
          }
        }
      },
      "Role": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleUser"
            },
            "readOnly": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleGroup"
            },
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "Sector": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "description": "Sector",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "UserSettings": {
        "type": "object",
        "properties": {
          "drawer_open_on_init": {
            "title": "Drawer open on init",
            "type": "boolean"
          },
          "interest_area_zoom_on_init": {
            "title": "Interest area zoom on init",
            "type": "boolean"
          },
          "map_zoom_buttons": {
            "title": "Map zoom buttons",
            "type": "boolean"
          },
          "map_initial_area": {
            "title": "Map initial area",
            "type": "boolean"
          },
          "map_zoom_to_point": {
            "title": "Map zoom to point",
            "type": "boolean"
          },
          "map_file_loader": {
            "title": "Map file loader",
            "type": "boolean"
          },
          "map_draw_button": {
            "title": "Map draw button",
            "type": "boolean"
          },
          "map_opacity_button": {
            "title": "Map opacity button",
            "type": "boolean"
          },
          "map_reachability_button": {
            "title": "Map reachability button",
            "type": "boolean"
          },
          "map_my_location": {
            "title": "Map my location",
            "type": "boolean"
          },
          "map_search_button": {
            "title": "Map search button",
            "type": "boolean"
          },
          "map_scale": {
            "title": "Map scale",
            "type": "boolean"
          },
          "minimap": {
            "title": "Minimap",
            "type": "boolean"
          },
          "map_pointer_coordinates": {
            "title": "Map pointer coordinates",
            "type": "boolean"
          },
          "initial_extent": {
            "title": "Initial extent",
            "type": "string",
            "x-nullable": true
          },
          "avatar_blob": {
            "title": "Avatar blob",
            "type": "string",
            "readOnly": true
          },
          "avatar": {
            "title": "Avatar",
            "type": "string",
            "readOnly": true,
            "x-nullable": true,
            "format": "uri"
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Ticket unique code (primary key)",
            "readOnly": true
          },
          "requesting": {
            "$ref": "#/definitions/User",
            "description": "User who requested the ticket"
          },
          "subject": {
            "type": "string",
            "description": "Ticket subject"
          },
          "description": {
            "type": "string",
            "description": "Ticket description"
          },
          "opened_in": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the ticket was opened",
            "readOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Role"
            },
            "description": "Roles related to this ticket"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Alert"
            },
            "description": "Alerts related to this ticket"
          },
          "alert_category": {
            "$ref": "#/definitions/AlertCategory",
            "description": "Alert category related to this ticket"
          }
        },
        "required": ["subject", "description", "requesting"]
      },
      "TicketAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "ticket": {
            "$ref": "#/definitions/Ticket",
            "description": "Ticket associated with this attachment"
          },
          "file_path": {
            "type": "string",
            "format": "binary",
            "description": "File attached to the ticket"
          },
          "name_file": {
            "type": "string",
            "description": "Name of the attached file"
          }
        },
        "required": ["ticket", "file_path", "name_file"]
      },
      "TicketStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status_category": {
            "type": "string",
            "enum": [
              "NAO_ANALISADO",
              "EM_ANDAMENTO",
              "CONCLUIDO",
              "RECUSADO",
              "DEFERIDO",
              "DESENVOLVIDO"
            ],
            "description": "Status category"
          },
          "priority_code": {
            "type": "string",
            "enum": [
              "BAIXA",
              "MEDIA",
              "ALTA"
            ],
            "description": "Priority code"
          },
          "ticket": {
            "$ref": "#/definitions/Ticket",
            "description": "Ticket associated with this status"
          },
          "analyzed_by": {
            "$ref": "#/definitions/User",
            "description": "User who analyzed the ticket",
            "x-nullable": true
          },
          "analyzed_in": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the ticket was analyzed",
            "x-nullable": true
          },
          "due_on": {
            "type": "string",
            "format": "date",
            "description": "Due date for the ticket",
            "x-nullable": true
          }
        }
      },
      "TicketStatusAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "ticket_status": {
            "$ref": "#/definitions/TicketStatus",
            "description": "Ticket status associated with this attachment"
          },
          "ticket_history": {
            "$ref": "#/definitions/TicketAnalysisHistory",
            "description": "Ticket analysis history associated with this attachment"
          },
          "file_path": {
            "type": "string",
            "format": "binary",
            "description": "File attached to the ticket status"
          },
          "name_file": {
            "type": "string",
            "description": "Name of the attached file"
          }
        },
        "required": ["ticket_status", "ticket_history", "file_path", "name_file"]
      },
      "TicketAnalysisHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "analyzed_update": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the analysis was updated"
          },
          "ticket_status": {
            "type": "string",
            "description": "Status of the ticket at the time of analysis"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the analysis"
          },
          "author": {
            "$ref": "#/definitions/User",
            "description": "User who wrote the analysis"
          },
          "ticket": {
            "$ref": "#/definitions/Ticket",
            "description": "Ticket associated with this analysis"
          }
        },
        "required": ["analyzed_update", "comment", "author", "ticket"]
      }
    }
  }
